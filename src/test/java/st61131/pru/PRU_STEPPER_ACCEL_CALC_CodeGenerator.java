package st61131.pru;

/*Generated by MPS */

import com.github.vlsi.pru.plc110.ArithmeticInstruction;
import com.github.vlsi.pru.plc110.CodeEmitter;
import com.github.vlsi.pru.plc110.Label;
import com.github.vlsi.pru.plc110.LdiInstruction;
import com.github.vlsi.pru.plc110.LeftMostBitDetectInstruction;
import com.github.vlsi.pru.plc110.QuickBranchInstruction;
import com.github.vlsi.pru.plc110.Register;
import com.github.vlsi.pru.plc110.RegisterField;

public class PRU_STEPPER_ACCEL_CALC_CodeGenerator {
  public void appendCode(CodeEmitter ce) {
    Label if1 = new Label("if1");
    Label endIf0 = new Label("endIf0");
    Label startWhileBody2 = new Label("startWhileBody2");
    Label endIf4 = new Label("endIf4");
    Label endWhile3 = new Label("endWhile3");
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(4, RegisterField.dw), new Register(2, RegisterField.dw), 1).setComment(
        "step_delay2x => R4, step_delay => R2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(4, RegisterField.dw), new Register(4, RegisterField.dw),
        new Register(1, RegisterField.dw)).setComment("step_delay2x => R4, rest => R1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(3, RegisterField.dw), new Register(3, RegisterField.dw), 2).setComment(
        "accel_count4x => R3, accel_count => R3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(3, RegisterField.dw), new Register(3, RegisterField.dw), 1).setComment(
        "accel_count4x => R3"));
    // Call PRU_DIVMOD
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(5, RegisterField.b0),
        new Register(4, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_DIVMOD_1_bitX => R5.b0, tmpPRU_DIVMOD_1_x => R4"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(5, RegisterField.b1),
        new Register(3, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_DIVMOD_1_bitY => R5.b1, tmpPRU_DIVMOD_1_y => R3"));

    ce.visitInstruction(new LdiInstruction(new Register(6, RegisterField.dw), (short) 1).setComment(
        "tmpPRU_DIVMOD_1_mask => R6"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if1,
        new Register(5, RegisterField.b1), new Register(5, RegisterField.b0)).setComment(
        "tmpPRU_DIVMOD_1_bitY => R5.b1, tmpPRU_DIVMOD_1_bitX => R5.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(7, RegisterField.dw), new Register(3, RegisterField.dw), 0).setComment(
        "tmpPRU_DIVMOD_1_b => R7, tmpPRU_DIVMOD_1_y => R3"));

    ce.visitInstruction(new QuickBranchInstruction(endIf0).setComment(""));
    ce.visitLabel(if1);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(5, RegisterField.b0), new Register(5, RegisterField.b0),
        new Register(5, RegisterField.b1)).setComment(
        "tmpPRU_DIVMOD_1_diff => R5.b0, tmpPRU_DIVMOD_1_bitX => R5.b0, tmpPRU_DIVMOD_1_bitY => R5.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(7, RegisterField.dw), new Register(3, RegisterField.dw),
        new Register(5, RegisterField.b0)).setComment(
        "tmpPRU_DIVMOD_1_b => R7, tmpPRU_DIVMOD_1_y => R3, tmpPRU_DIVMOD_1_diff => R5.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(6, RegisterField.dw), new Register(6, RegisterField.dw),
        new Register(5, RegisterField.b0)).setComment(
        "tmpPRU_DIVMOD_1_mask => R6, tmpPRU_DIVMOD_1_diff => R5.b0"));

    ce.visitLabel(endIf0);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(3, RegisterField.dw), new Register(4, RegisterField.dw), 0).setComment(
        "tmpPRU_DIVMOD_1_a => R3, tmpPRU_DIVMOD_1_x => R4"));
    ce.visitInstruction(new LdiInstruction(new Register(4, RegisterField.dw), (short) 0).setComment(
        "tmpPRU_DIVMOD_1_div => R4"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile3,
        new Register(6, RegisterField.dw), 0).setComment("tmpPRU_DIVMOD_1_mask => R6"));
    ce.visitLabel(startWhileBody2);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf4,
        new Register(3, RegisterField.dw), new Register(7, RegisterField.dw)).setComment(
        "tmpPRU_DIVMOD_1_a => R3, tmpPRU_DIVMOD_1_b => R7"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(4, RegisterField.dw), new Register(4, RegisterField.dw),
        new Register(6, RegisterField.dw)).setComment(
        "tmpPRU_DIVMOD_1_div => R4, tmpPRU_DIVMOD_1_mask => R6"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(3, RegisterField.dw), new Register(3, RegisterField.dw),
        new Register(7, RegisterField.dw)).setComment(
        "tmpPRU_DIVMOD_1_a => R3, tmpPRU_DIVMOD_1_b => R7"));

    ce.visitLabel(endIf4);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(6, RegisterField.dw), new Register(6, RegisterField.dw), 1).setComment(
        "tmpPRU_DIVMOD_1_mask => R6"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(7, RegisterField.dw), new Register(7, RegisterField.dw), 1).setComment(
        "tmpPRU_DIVMOD_1_b => R7"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody2,
            new Register(6, RegisterField.dw), 0).setComment("tmpPRU_DIVMOD_1_mask => R6"));
    ce.visitLabel(endWhile3);

    // End PRU_DIVMOD
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(1, RegisterField.dw), new Register(3, RegisterField.dw), 0).setComment(
        "rest => R1, tmpPRU_DIVMOD_1_mod => R3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(3, RegisterField.dw), new Register(4, RegisterField.dw), 0).setComment(
        "next_delay => R3, tmpPRU_DIVMOD_1_div => R4"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(3, RegisterField.dw), new Register(2, RegisterField.dw),
        new Register(3, RegisterField.dw)).setComment("next_delay => R3, step_delay => R2"));

  }
}
