package st61131.pru;

/*Generated by MPS */

import com.github.vlsi.pru.plc110.ArithmeticInstruction;
import com.github.vlsi.pru.plc110.CodeEmitter;
import com.github.vlsi.pru.plc110.Format2Instruction;
import com.github.vlsi.pru.plc110.JumpInstruction;
import com.github.vlsi.pru.plc110.Label;
import com.github.vlsi.pru.plc110.LdiInstruction;
import com.github.vlsi.pru.plc110.LeftMostBitDetectInstruction;
import com.github.vlsi.pru.plc110.QuickBranchInstruction;
import com.github.vlsi.pru.plc110.Register;
import com.github.vlsi.pru.plc110.RegisterField;

import java.util.function.Consumer;

public class PRU_DIV_CodeGenerator implements Consumer<CodeEmitter> {
  @Override
  public void accept(CodeEmitter ce) {
    Label if1 = new Label("if1");
    Label endIf0 = new Label("endIf0");
    Label startWhileBody2 = new Label("startWhileBody2");
    Label endIf4 = new Label("endIf4");
    Label endWhile3 = new Label("endWhile3");
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(3, RegisterField.b0),
        new Register(1, RegisterField.dw), (byte) 1).setComment("bitX => R3.b0, x => R1"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(3, RegisterField.b1),
        new Register(2, RegisterField.dw), (byte) 1).setComment("bitY => R3.b1, y => R2"));

    ce.visitInstruction(
        new LdiInstruction(new Register(4, RegisterField.dw), (short) 1).setComment("mask => R4"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if1,
        new Register(3, RegisterField.b1), new Register(3, RegisterField.b0)).setComment(
        "bitY => R3.b1, bitX => R3.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(5, RegisterField.dw), new Register(2, RegisterField.dw), 0).setComment(
        "b => R5, y => R2"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf0,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if1);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(3, RegisterField.b0), new Register(3, RegisterField.b0),
        new Register(3, RegisterField.b1)).setComment(
        "diff => R3.b0, bitX => R3.b0, bitY => R3.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(5, RegisterField.dw), new Register(2, RegisterField.dw),
        new Register(3, RegisterField.b0)).setComment("b => R5, y => R2, diff => R3.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(4, RegisterField.dw), new Register(4, RegisterField.dw),
        new Register(3, RegisterField.b0)).setComment("mask => R4, diff => R3.b0"));

    ce.visitLabel(endIf0);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(3, RegisterField.dw), new Register(1, RegisterField.dw), 0).setComment(
        "a => R3, x => R1"));
    ce.visitInstruction(
        new LdiInstruction(new Register(6, RegisterField.dw), (short) 0).setComment("div => R6"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile3,
        new Register(4, RegisterField.dw), 0).setComment("mask => R4"));
    ce.visitLabel(startWhileBody2);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf4,
        new Register(3, RegisterField.dw), new Register(5, RegisterField.dw)).setComment(
        "a => R3, b => R5"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(6, RegisterField.dw), new Register(6, RegisterField.dw),
        new Register(4, RegisterField.dw)).setComment("div => R6, mask => R4"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(3, RegisterField.dw), new Register(3, RegisterField.dw),
        new Register(5, RegisterField.dw)).setComment("a => R3, b => R5"));

    ce.visitLabel(endIf4);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(4, RegisterField.dw), new Register(4, RegisterField.dw), 1).setComment(
        "mask => R4"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(5, RegisterField.dw), new Register(5, RegisterField.dw), 1).setComment(
        "b => R5"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody2,
            new Register(4, RegisterField.dw), 0).setComment("mask => R4"));
    ce.visitLabel(endWhile3);


  }
}
