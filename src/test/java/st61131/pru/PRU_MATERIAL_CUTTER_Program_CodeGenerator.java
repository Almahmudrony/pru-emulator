package st61131.pru;

/*Generated by MPS */

import com.github.vlsi.pru.plc110.ArithmeticInstruction;
import com.github.vlsi.pru.plc110.CodeEmitter;
import com.github.vlsi.pru.plc110.Format2Instruction;
import com.github.vlsi.pru.plc110.JumpInstruction;
import com.github.vlsi.pru.plc110.Label;
import com.github.vlsi.pru.plc110.LdiInstruction;
import com.github.vlsi.pru.plc110.MemoryTransferInstruction;
import com.github.vlsi.pru.plc110.Pru;
import com.github.vlsi.pru.plc110.QuickBranchInstruction;
import com.github.vlsi.pru.plc110.Register;
import com.github.vlsi.pru.plc110.RegisterField;

import java.util.function.Consumer;

public class PRU_MATERIAL_CUTTER_Program_CodeGenerator implements Consumer<CodeEmitter> {


  public void ramSetPRU_MATERIAL_CUTTER_cutter_enable(Pru cpu, int value) {
    cpu.ram().putInt(16, value);
  }

  public void ramSetPRU_MATERIAL_CUTTER_cutter_runLength(Pru cpu, int value) {
    cpu.ram().putInt(24, value);
  }

  public int ramGetPRU_MATERIAL_CUTTER_abz_counter(Pru cpu) {
    return cpu.ram().getInt(4);
  }

  public int ramGetPRU_MATERIAL_CUTTER_abz_position(Pru cpu) {
    return cpu.ram().getInt(8);
  }

  public int ramGetPRU_MATERIAL_CUTTER_abz_zeroDetected(Pru cpu) {
    return cpu.ram().getInt(12);
  }

  public int ramGetPRU_MATERIAL_CUTTER_cutter_offset(Pru cpu) {
    return cpu.ram().getInt(20);
  }

  public int ramGetPRU_MATERIAL_CUTTER_cutter_state(Pru cpu) {
    return cpu.ram().getInt(28);
  }

  public int ramGetSys_inputs_in4(Pru cpu) {
    return cpu.ram().getInt(32);
  }

  @Override
  public void accept(CodeEmitter ce) {
    Label if1 = new Label("if1");
    Label endIf4 = new Label("endIf4");
    Label if3 = new Label("if3");
    Label endIf2 = new Label("endIf2");
    Label elsIf5 = new Label("elsIf5");
    Label endIf0 = new Label("endIf0");
    Label startWhile6 = new Label("startWhile6");
    Label startWhileBody7 = new Label("startWhileBody7");
    Label orMatch10 = new Label("orMatch10");
    Label if12 = new Label("if12");
    Label endIf11 = new Label("endIf11");
    Label endIf9 = new Label("endIf9");
    Label endIf13 = new Label("endIf13");
    Label if15 = new Label("if15");
    Label endIf16 = new Label("endIf16");
    Label elsIf20 = new Label("elsIf20");
    Label orMatch19 = new Label("orMatch19");
    Label if18 = new Label("if18");
    Label endIf17 = new Label("endIf17");
    Label elsIf22 = new Label("elsIf22");
    Label endIf21 = new Label("endIf21");
    Label endIf14 = new Label("endIf14");
    Label startRepeat23 = new Label("startRepeat23");
    Label if25 = new Label("if25");
    Label endIf28 = new Label("endIf28");
    Label if27 = new Label("if27");
    Label endIf26 = new Label("endIf26");
    Label elsIf29 = new Label("elsIf29");
    Label endIf24 = new Label("endIf24");
    Label endIf30 = new Label("endIf30");
    Label if32 = new Label("if32");
    Label endIf33 = new Label("endIf33");
    Label startWhile34 = new Label("startWhile34");
    Label startWhileBody35 = new Label("startWhileBody35");
    Label endWhile36 = new Label("endWhile36");
    Label endIf31 = new Label("endIf31");
    Label if38 = new Label("if38");
    Label endIf41 = new Label("endIf41");
    Label if40 = new Label("if40");
    Label endIf39 = new Label("endIf39");
    Label elsIf42 = new Label("elsIf42");
    Label endIf37 = new Label("endIf37");
    Label endWhile8 = new Label("endWhile8");
    // Call SYS_PRU0_PROCESS_INPUTS
    // Call SYS_PRU0_CURRENT_TIME
    ce.visitInstruction(
        new LdiInstruction(new Register(10, RegisterField.dw), (short) 28684).setComment(
            "sys_current_time_controlReg => R10"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(11, RegisterField.dw)).setAddress(
        new Register(10, RegisterField.dw)).setOffset(0).setLength(4).encode().setComment(
        "sys_current_time_cpuCycles => R11, sys_current_time_controlReg => R10"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(12, RegisterField.dw), new Register(11, RegisterField.dw),
        new Register(3, RegisterField.dw)).setComment(
        "sys_current_time_totalCycles => R12, sys_current_time_cpuCycles => R11, sys_current_time_offset => R3"));
    //
    // End SYS_PRU0_CURRENT_TIME
    // Call SYS_PRU0_RAW_INPUTS
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(9, RegisterField.b1), new Register(31, RegisterField.dw), 21).setComment(
        "IN_1 хранится в 21-ом бите, поэтому сдвигаем вправо на 21, sys_inputs_rawInputs_in1 => R9.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.AND,
        new Register(9, RegisterField.b1), new Register(9, RegisterField.b1), 1).setComment(
        "получаем значение IN_1, sys_inputs_rawInputs_in1 => R9.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(9, RegisterField.b2), new Register(31, RegisterField.dw), 22).setComment(
        "IN_2 хранится в 22-ом бите, поэтому сдвигаем вправо на 22, sys_inputs_rawInputs_in2 => R9.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.AND,
        new Register(9, RegisterField.b2), new Register(9, RegisterField.b2), 1).setComment(
        "получаем значение IN_2, sys_inputs_rawInputs_in2 => R9.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(9, RegisterField.b3), new Register(31, RegisterField.dw), 2).setComment(
        "IN_3 хранится в 2-ом бите, поэтому сдвигаем вправо на 2, sys_inputs_rawInputs_in3 => R9.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.AND,
        new Register(9, RegisterField.b3), new Register(9, RegisterField.b3), 1).setComment(
        "получаем значение IN_3, sys_inputs_rawInputs_in3 => R9.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(13, RegisterField.b0), new Register(31, RegisterField.dw), 3).setComment(
        "IN_4 хранится в 3-ем бите, поэтому сдвигаем вправо на 3, sys_inputs_rawInputs_in4 => R13.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.AND,
        new Register(13, RegisterField.b0), new Register(13, RegisterField.b0), 1).setComment(
        "получаем значение IN_4, sys_inputs_rawInputs_in4 => R13.b0"));

    // End SYS_PRU0_RAW_INPUTS
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.b1), new Register(9, RegisterField.b1), 0).setComment(
        "sys_inputs_in1 => R13.b1, sys_inputs_rawInputs_in1 => R9.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.b2), new Register(9, RegisterField.b2), 0).setComment(
        "sys_inputs_in2 => R13.b2, sys_inputs_rawInputs_in2 => R9.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.b3), new Register(9, RegisterField.b3), 0).setComment(
        "sys_inputs_in3 => R13.b3, sys_inputs_rawInputs_in3 => R9.b3"));
    // Call PRU_DEBOUNCE
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.b0), new Register(13, RegisterField.b0), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0, sys_inputs_rawInputs_in4 => R13.b0"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.w0), (short) 16960).setComment(
            "sys_inputs_tmpPRU_DEBOUNCE_0_debounce => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.w2), (short) 15).setComment(""));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if1,
        new Register(8, RegisterField.b3), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_outputIsChanging => R8.b3"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, elsIf5,
        new Register(14, RegisterField.b0), new Register(8, RegisterField.b2)).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0, sys_inputs_tmpPRU_DEBOUNCE_0_out => R8.b2"));
    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf0,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if1);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if3,
        new Register(14, RegisterField.b0), new Register(8, RegisterField.b1)).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0, sys_inputs_tmpPRU_DEBOUNCE_0_newVal => R8.b1"));
    // Значение не менялось -- смотрим сколько времени прошло
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(16, RegisterField.dw), new Register(12, RegisterField.dw),
        new Register(4, RegisterField.dw)).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_diff => R16, sys_current_time_totalCycles => R12, sys_inputs_tmpPRU_DEBOUNCE_0_prevUpdateTime => R4"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf4,
        new Register(16, RegisterField.dw), new Register(15, RegisterField.dw)).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_diff => R16, sys_inputs_tmpPRU_DEBOUNCE_0_debounce => R15"));
    // Если прошло более debounce тактов, то фильтрация окончена
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(8, RegisterField.b2), new Register(14, RegisterField.b0), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_out => R8.b2, sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b3), (short) 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_outputIsChanging => R8.b3"));

    ce.visitLabel(endIf4);


    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf2,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if3);
    // Если значение снова изменилось, начинаем считать сначала
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(8, RegisterField.b1), new Register(14, RegisterField.b0), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_newVal => R8.b1, sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(4, RegisterField.dw), new Register(12, RegisterField.dw), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_prevUpdateTime => R4, sys_current_time_totalCycles => R12"));

    ce.visitLabel(endIf2);


    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf0,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(elsIf5);
    // Если значение на входе изменилось, то запускаем отсчёт времени
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(8, RegisterField.b1), new Register(14, RegisterField.b0), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_newVal => R8.b1, sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(4, RegisterField.dw), new Register(12, RegisterField.dw), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_prevUpdateTime => R4, sys_current_time_totalCycles => R12"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b3), (short) 1).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_outputIsChanging => R8.b3"));

    ce.visitLabel(endIf0);

    // End PRU_DEBOUNCE
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.b0), new Register(8, RegisterField.b2), 0).setComment(
        "sys_inputs_in4 => R18.b0, sys_inputs_tmpPRU_DEBOUNCE_0_out => R8.b2"));
    //
    //
    //
    // End SYS_PRU0_PROCESS_INPUTS
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.dw), (short) 200).setComment(
            "sys_cycleLength => R17"));
    ce.visitLabel(startWhile6);
    ce.visitLabel(startWhileBody7);
    // Call user procedure
    // Call PRU_MATERIAL_CUTTER
    // Call PRU_ABZ_ENCODER
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.b1), new Register(13, RegisterField.b1), 0).setComment(
        "PRU_MATERIAL_CUTTER_abz_a => R14.b1, sys_inputs_in1 => R13.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.b2), new Register(13, RegisterField.b2), 0).setComment(
        "PRU_MATERIAL_CUTTER_abz_b => R14.b2, sys_inputs_in2 => R13.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.b3), new Register(13, RegisterField.b3), 0).setComment(
        "PRU_MATERIAL_CUTTER_abz_z => R14.b3, sys_inputs_in3 => R13.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.XOR,
        new Register(18, RegisterField.b0), new Register(14, RegisterField.b1),
        new Register(6, RegisterField.b2)).setComment(
        "PRU_MATERIAL_CUTTER_abz_changedA => R18.b0, PRU_MATERIAL_CUTTER_abz_a => R14.b1, PRU_MATERIAL_CUTTER_abz_prevA => R6.b2"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, orMatch10,
        new Register(18, RegisterField.b0), 0).setComment(
        "PRU_MATERIAL_CUTTER_abz_changedA => R18.b0"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endIf9,
        new Register(14, RegisterField.b2), new Register(6, RegisterField.b3)).setComment(
        "PRU_MATERIAL_CUTTER_abz_b => R14.b2, PRU_MATERIAL_CUTTER_abz_prevB => R6.b3"));
    ce.visitLabel(orMatch10);

    // Если a или b изменилось
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(5, RegisterField.w0), new Register(5, RegisterField.w0), 1).setComment(
        "PRU_MATERIAL_CUTTER_abz_counter => R5.w0"));
    //
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.XOR,
        new Register(18, RegisterField.b1), new Register(14, RegisterField.b1),
        new Register(14, RegisterField.b2)).setComment(
        "PRU_MATERIAL_CUTTER_abz_aSameAsB => R18.b1, PRU_MATERIAL_CUTTER_abz_a => R14.b1, PRU_MATERIAL_CUTTER_abz_b => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.XOR,
        new Register(18, RegisterField.b1), new Register(18, RegisterField.b1), 1).setComment(
        "PRU_MATERIAL_CUTTER_abz_aSameAsB => R18.b1"));

    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if12,
        new Register(18, RegisterField.b1), new Register(18, RegisterField.b0)).setComment(
        "PRU_MATERIAL_CUTTER_abz_aSameAsB => R18.b1, PRU_MATERIAL_CUTTER_abz_changedA => R18.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(5, RegisterField.w2), new Register(5, RegisterField.w2), 1).setComment(
        "PRU_MATERIAL_CUTTER_abz_position => R5.w2"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf11,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if12);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(5, RegisterField.w2), new Register(5, RegisterField.w2), 1).setComment(
        "PRU_MATERIAL_CUTTER_abz_position => R5.w2"));

    ce.visitLabel(endIf11);


    ce.visitLabel(endIf9);

    //
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(6, RegisterField.b2), new Register(14, RegisterField.b1), 0).setComment(
        "PRU_MATERIAL_CUTTER_abz_prevA => R6.b2, PRU_MATERIAL_CUTTER_abz_a => R14.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(6, RegisterField.b3), new Register(14, RegisterField.b2), 0).setComment(
        "PRU_MATERIAL_CUTTER_abz_prevB => R6.b3, PRU_MATERIAL_CUTTER_abz_b => R14.b2"));
    //
    // Call PRU_RTRIG
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.AND,
        new Register(14, RegisterField.b1), new Register(14, RegisterField.b3),
        new Register(7, RegisterField.b0)).setComment(
        "PRU_MATERIAL_CUTTER_abz_tmpPRU_RTRIG_0_out => R14.b1, PRU_MATERIAL_CUTTER_abz_tmpPRU_RTRIG_0_in => R14.b3, PRU_MATERIAL_CUTTER_abz_tmpPRU_RTRIG_0_mem => R7.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.XOR,
        new Register(7, RegisterField.b0), new Register(14, RegisterField.b3), 1).setComment(
        "PRU_MATERIAL_CUTTER_abz_tmpPRU_RTRIG_0_mem => R7.b0, PRU_MATERIAL_CUTTER_abz_tmpPRU_RTRIG_0_in => R14.b3"));
    // End PRU_RTRIG
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endIf13,
        new Register(14, RegisterField.b1), 0).setComment(
        "PRU_MATERIAL_CUTTER_abz_tmpPRU_RTRIG_0_out => R14.b1"));
    ce.visitInstruction(new LdiInstruction(new Register(5, RegisterField.w2), (short) 0).setComment(
        "PRU_MATERIAL_CUTTER_abz_position => R5.w2"));
    ce.visitInstruction(new LdiInstruction(new Register(7, RegisterField.b1), (short) 1).setComment(
        "PRU_MATERIAL_CUTTER_abz_zeroDetected => R7.b1"));

    ce.visitLabel(endIf13);

    //
    // End PRU_ABZ_ENCODER
    // Call PRU_CUTTER
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.w1), new Register(5, RegisterField.w0), 0).setComment(
        "PRU_MATERIAL_CUTTER_cutter_cntr => R14.w1, PRU_MATERIAL_CUTTER_abz_counter => R5.w0"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if15,
        new Register(8, RegisterField.b0), 2).setComment(
        "PRU_MATERIAL_CUTTER_cutter_state => R8.b0"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, elsIf20,
        new Register(8, RegisterField.b0), 0).setComment(
        "PRU_MATERIAL_CUTTER_cutter_state => R8.b0"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, elsIf22,
        new Register(8, RegisterField.b0), 1).setComment(
        "PRU_MATERIAL_CUTTER_cutter_state => R8.b0"));
    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf14,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if15);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, endIf16,
        new Register(7, RegisterField.b2), 0).setComment(
        "PRU_MATERIAL_CUTTER_cutter_enable => R7.b2"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 0).setComment(
        "PRU_MATERIAL_CUTTER_cutter_state => R8.b0"));
    ce.visitInstruction(new LdiInstruction(new Register(1, RegisterField.dw), (short) 0).setComment(
        "PRU_MATERIAL_CUTTER_cutter_offset => R1"));

    ce.visitLabel(endIf16);

    //

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf14,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(elsIf20);
    ce.visitInstruction(new LdiInstruction(new Register(1, RegisterField.dw), (short) 0).setComment(
        "PRU_MATERIAL_CUTTER_cutter_offset => R1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(6, RegisterField.w0), new Register(14, RegisterField.w1), 0).setComment(
        "PRU_MATERIAL_CUTTER_cutter_prevCntr => R6.w0, PRU_MATERIAL_CUTTER_cutter_cntr => R14.w1"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, orMatch19,
        new Register(7, RegisterField.b2), 0).setComment(
        "PRU_MATERIAL_CUTTER_cutter_enable => R7.b2"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.LT, if18,
        new Register(14, RegisterField.w1), 0).setComment(
        "PRU_MATERIAL_CUTTER_cutter_cntr => R14.w1"));
    ce.visitLabel(orMatch19);

    ce.visitInstruction(new LdiInstruction(new Register(7, RegisterField.b3), (short) 0).setComment(
        "PRU_MATERIAL_CUTTER_cutter_out => R7.b3"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf17,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if18);
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 1).setComment(
        "PRU_MATERIAL_CUTTER_cutter_state => R8.b0"));
    ce.visitInstruction(new LdiInstruction(new Register(7, RegisterField.b3), (short) 1).setComment(
        "PRU_MATERIAL_CUTTER_cutter_out => R7.b3"));

    ce.visitLabel(endIf17);

    //

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf14,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(elsIf22);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(18, RegisterField.w0), new Register(14, RegisterField.w1),
        new Register(6, RegisterField.w0)).setComment(
        "PRU_MATERIAL_CUTTER_cutter_diff => R18.w0, PRU_MATERIAL_CUTTER_cutter_cntr => R14.w1, PRU_MATERIAL_CUTTER_cutter_prevCntr => R6.w0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(6, RegisterField.w0), new Register(14, RegisterField.w1), 0).setComment(
        "PRU_MATERIAL_CUTTER_cutter_prevCntr => R6.w0, PRU_MATERIAL_CUTTER_cutter_cntr => R14.w1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(1, RegisterField.dw), new Register(1, RegisterField.dw),
        new Register(18, RegisterField.w0)).setComment(
        "PRU_MATERIAL_CUTTER_cutter_offset => R1, PRU_MATERIAL_CUTTER_cutter_diff => R18.w0"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf21,
        new Register(1, RegisterField.dw), new Register(2, RegisterField.dw)).setComment(
        "PRU_MATERIAL_CUTTER_cutter_offset => R1, PRU_MATERIAL_CUTTER_cutter_runLength => R2"));
    ce.visitInstruction(new LdiInstruction(new Register(7, RegisterField.b3), (short) 0).setComment(
        "PRU_MATERIAL_CUTTER_cutter_out => R7.b3"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 2).setComment(
        "PRU_MATERIAL_CUTTER_cutter_state => R8.b0"));

    ce.visitLabel(endIf21);


    ce.visitLabel(endIf14);

    // End PRU_CUTTER
    // Call SYS_PRU0_OUTPUTS
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.b1), new Register(7, RegisterField.b3), 0).setComment(
        "sys_outputs_out1 => R14.b1, PRU_MATERIAL_CUTTER_cutter_out => R7.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.AND,
        new Register(14, RegisterField.b2), new Register(30, RegisterField.b3), 207).setComment(
        "sys_outputs_tmp => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(14, RegisterField.b3), new Register(14, RegisterField.b1), 4).setComment(
        "sys_outputs_tmp2 => R14.b3, sys_outputs_out1 => R14.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.OR,
        new Register(14, RegisterField.b2), new Register(14, RegisterField.b2),
        new Register(14, RegisterField.b3)).setComment(
        "sys_outputs_tmp => R14.b2, sys_outputs_tmp2 => R14.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(14, RegisterField.b3), new Register(9, RegisterField.b0), 5).setComment(
        "sys_outputs_tmp2 => R14.b3, sys_outputs_out2 => R9.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.OR,
        new Register(14, RegisterField.b2), new Register(14, RegisterField.b2),
        new Register(14, RegisterField.b3)).setComment(
        "sys_outputs_tmp => R14.b2, sys_outputs_tmp2 => R14.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(30, RegisterField.b3), new Register(14, RegisterField.b2), 0).setComment(
        "sys_outputs_tmp => R14.b2"));

    //
    // End SYS_PRU0_OUTPUTS
    // End PRU_MATERIAL_CUTTER
    //
    // Variable sys_controlRegisterAddress was never used, thus optimized out instruction LDI
    ce.visitLabel(startRepeat23);
    // Call SYS_PRU0_PROCESS_INPUTS
    // Call SYS_PRU0_CURRENT_TIME
    ce.visitInstruction(
        new LdiInstruction(new Register(10, RegisterField.dw), (short) 28684).setComment(
            "sys_current_time_controlReg => R10"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(11, RegisterField.dw)).setAddress(
        new Register(10, RegisterField.dw)).setOffset(0).setLength(4).encode().setComment(
        "sys_current_time_cpuCycles => R11, sys_current_time_controlReg => R10"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(12, RegisterField.dw), new Register(11, RegisterField.dw),
        new Register(3, RegisterField.dw)).setComment(
        "sys_current_time_totalCycles => R12, sys_current_time_cpuCycles => R11, sys_current_time_offset => R3"));
    //
    // End SYS_PRU0_CURRENT_TIME
    // Call SYS_PRU0_RAW_INPUTS
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(9, RegisterField.b1), new Register(31, RegisterField.dw), 21).setComment(
        "IN_1 хранится в 21-ом бите, поэтому сдвигаем вправо на 21, sys_inputs_rawInputs_in1 => R9.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.AND,
        new Register(9, RegisterField.b1), new Register(9, RegisterField.b1), 1).setComment(
        "получаем значение IN_1, sys_inputs_rawInputs_in1 => R9.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(9, RegisterField.b2), new Register(31, RegisterField.dw), 22).setComment(
        "IN_2 хранится в 22-ом бите, поэтому сдвигаем вправо на 22, sys_inputs_rawInputs_in2 => R9.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.AND,
        new Register(9, RegisterField.b2), new Register(9, RegisterField.b2), 1).setComment(
        "получаем значение IN_2, sys_inputs_rawInputs_in2 => R9.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(9, RegisterField.b3), new Register(31, RegisterField.dw), 2).setComment(
        "IN_3 хранится в 2-ом бите, поэтому сдвигаем вправо на 2, sys_inputs_rawInputs_in3 => R9.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.AND,
        new Register(9, RegisterField.b3), new Register(9, RegisterField.b3), 1).setComment(
        "получаем значение IN_3, sys_inputs_rawInputs_in3 => R9.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(13, RegisterField.b0), new Register(31, RegisterField.dw), 3).setComment(
        "IN_4 хранится в 3-ем бите, поэтому сдвигаем вправо на 3, sys_inputs_rawInputs_in4 => R13.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.AND,
        new Register(13, RegisterField.b0), new Register(13, RegisterField.b0), 1).setComment(
        "получаем значение IN_4, sys_inputs_rawInputs_in4 => R13.b0"));

    // End SYS_PRU0_RAW_INPUTS
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.b1), new Register(9, RegisterField.b1), 0).setComment(
        "sys_inputs_in1 => R13.b1, sys_inputs_rawInputs_in1 => R9.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.b2), new Register(9, RegisterField.b2), 0).setComment(
        "sys_inputs_in2 => R13.b2, sys_inputs_rawInputs_in2 => R9.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.b3), new Register(9, RegisterField.b3), 0).setComment(
        "sys_inputs_in3 => R13.b3, sys_inputs_rawInputs_in3 => R9.b3"));
    // Call PRU_DEBOUNCE
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.b0), new Register(13, RegisterField.b0), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0, sys_inputs_rawInputs_in4 => R13.b0"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.w0), (short) 16960).setComment(
            "sys_inputs_tmpPRU_DEBOUNCE_0_debounce => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.w2), (short) 15).setComment(""));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if25,
        new Register(8, RegisterField.b3), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_outputIsChanging => R8.b3"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, elsIf29,
        new Register(14, RegisterField.b0), new Register(8, RegisterField.b2)).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0, sys_inputs_tmpPRU_DEBOUNCE_0_out => R8.b2"));
    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf24,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if25);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if27,
        new Register(14, RegisterField.b0), new Register(8, RegisterField.b1)).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0, sys_inputs_tmpPRU_DEBOUNCE_0_newVal => R8.b1"));
    // Значение не менялось -- смотрим сколько времени прошло
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(16, RegisterField.dw), new Register(12, RegisterField.dw),
        new Register(4, RegisterField.dw)).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_diff => R16, sys_current_time_totalCycles => R12, sys_inputs_tmpPRU_DEBOUNCE_0_prevUpdateTime => R4"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf28,
        new Register(16, RegisterField.dw), new Register(15, RegisterField.dw)).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_diff => R16, sys_inputs_tmpPRU_DEBOUNCE_0_debounce => R15"));
    // Если прошло более debounce тактов, то фильтрация окончена
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(8, RegisterField.b2), new Register(14, RegisterField.b0), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_out => R8.b2, sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b3), (short) 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_outputIsChanging => R8.b3"));

    ce.visitLabel(endIf28);


    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf26,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if27);
    // Если значение снова изменилось, начинаем считать сначала
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(8, RegisterField.b1), new Register(14, RegisterField.b0), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_newVal => R8.b1, sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(4, RegisterField.dw), new Register(12, RegisterField.dw), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_prevUpdateTime => R4, sys_current_time_totalCycles => R12"));

    ce.visitLabel(endIf26);


    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf24,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(elsIf29);
    // Если значение на входе изменилось, то запускаем отсчёт времени
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(8, RegisterField.b1), new Register(14, RegisterField.b0), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_newVal => R8.b1, sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(4, RegisterField.dw), new Register(12, RegisterField.dw), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_prevUpdateTime => R4, sys_current_time_totalCycles => R12"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b3), (short) 1).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_outputIsChanging => R8.b3"));

    ce.visitLabel(endIf24);

    // End PRU_DEBOUNCE
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.b0), new Register(8, RegisterField.b2), 0).setComment(
        "sys_inputs_in4 => R18.b0, sys_inputs_tmpPRU_DEBOUNCE_0_out => R8.b2"));
    //
    //
    //
    // End SYS_PRU0_PROCESS_INPUTS
    // Data transfer while waiting for next cycle
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(18, RegisterField.b1)).setAddress(3).setOffset(0).setLength(
        1).encode().setComment("sys_transferState => R18.b1"));
    //
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, endIf30,
        new Register(18, RegisterField.b1), 1).setComment("sys_transferState => R18.b1"));
    // SYS_PRU_PROCESS_HOST_COMMUNICATION
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.STORE,
        new Register(5, RegisterField.w0)).setAddress(3).setOffset(4).setLength(
        2).encode().setComment("PRU_MATERIAL_CUTTER_abz_counter => R5.w0"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.STORE,
        new Register(5, RegisterField.w2)).setAddress(3).setOffset(8).setLength(
        2).encode().setComment("PRU_MATERIAL_CUTTER_abz_position => R5.w2"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.STORE,
        new Register(7, RegisterField.b1)).setAddress(3).setOffset(12).setLength(
        1).encode().setComment("PRU_MATERIAL_CUTTER_abz_zeroDetected => R7.b1"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(7, RegisterField.b2)).setAddress(3).setOffset(16).setLength(
        1).encode().setComment("PRU_MATERIAL_CUTTER_cutter_enable => R7.b2"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.STORE,
        new Register(1, RegisterField.dw)).setAddress(3).setOffset(20).setLength(
        4).encode().setComment("PRU_MATERIAL_CUTTER_cutter_offset => R1"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(2, RegisterField.dw)).setAddress(3).setOffset(24).setLength(
        4).encode().setComment("PRU_MATERIAL_CUTTER_cutter_runLength => R2"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.STORE,
        new Register(8, RegisterField.b0)).setAddress(3).setOffset(28).setLength(
        1).encode().setComment("PRU_MATERIAL_CUTTER_cutter_state => R8.b0"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.STORE,
        new Register(18, RegisterField.b0)).setAddress(3).setOffset(32).setLength(
        1).encode().setComment("sys_inputs_in4 => R18.b0"));

    //
    ce.visitInstruction(
        new LdiInstruction(new Register(18, RegisterField.b1), (short) 0).setComment(
            "sys_transferState => R18.b1"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.STORE,
        new Register(18, RegisterField.b1)).setAddress(3).setOffset(0).setLength(
        1).encode().setComment("sys_transferState => R18.b1"));

    ce.visitLabel(endIf30);

    //
    // Get elapsed CPU cycles
    // Call SYS_PRU0_CURRENT_TIME
    ce.visitInstruction(
        new LdiInstruction(new Register(10, RegisterField.dw), (short) 28684).setComment(
            "sys_current_time_controlReg => R10"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(11, RegisterField.dw)).setAddress(
        new Register(10, RegisterField.dw)).setOffset(0).setLength(4).encode().setComment(
        "sys_current_time_cpuCycles => R11, sys_current_time_controlReg => R10"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(12, RegisterField.dw), new Register(11, RegisterField.dw),
        new Register(3, RegisterField.dw)).setComment(
        "sys_current_time_totalCycles => R12, sys_current_time_cpuCycles => R11, sys_current_time_offset => R3"));
    //
    // End SYS_PRU0_CURRENT_TIME
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(11, RegisterField.dw), 60).setComment(
        "sys_currentCycles => R18, sys_current_time_cpuCycles => R11"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, startRepeat23,
            new Register(18, RegisterField.dw), new Register(17, RegisterField.dw)).setComment(
            "sys_currentCycles => R18, sys_cycleLength => R17"));

    //
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(3, RegisterField.dw), new Register(3, RegisterField.dw),
        new Register(17, RegisterField.dw)).setComment(
        "sys_current_time_offset => R3, sys_cycleLength => R17"));
    // Call WAIT_TICK_DW
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(17, RegisterField.dw), 0).setComment(
        "tmpWAIT_TICK_DW_0_pruCycleLength => R18, sys_cycleLength => R17"));
    // 0x00007000..0x00007FFF -- PRU0 Control Registers, 0xC -- cycle count register
    ce.visitInstruction(
        new LdiInstruction(new Register(19, RegisterField.dw), (short) 28684).setComment(
            "tmpWAIT_TICK_DW_0_controlRegisterAddress => R19"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(20, RegisterField.dw)).setAddress(
        new Register(19, RegisterField.dw)).setOffset(0).setLength(4).encode().setComment(
        "Load cycle count, 1+wdcnt*2==3 cycles, tmpWAIT_TICK_DW_0_currentCycles => R20, tmpWAIT_TICK_DW_0_controlRegisterAddress => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 10).setComment(
        "tmpWAIT_TICK_DW_0_currentCycles => R20"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.LT, if32,
        new Register(18, RegisterField.dw), new Register(20, RegisterField.dw)).setComment(
        "tmpWAIT_TICK_DW_0_pruCycleLength => R18, tmpWAIT_TICK_DW_0_currentCycles => R20"));
    ce.visitInstruction(
        new LdiInstruction(new Register(21, RegisterField.dw), (short) 0).setComment(
            "tmpWAIT_TICK_DW_0_cyclesLeft => R21"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf31,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if32);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(21, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(20, RegisterField.dw)).setComment(
        "tmpWAIT_TICK_DW_0_cyclesLeft => R21, tmpWAIT_TICK_DW_0_pruCycleLength => R18, tmpWAIT_TICK_DW_0_currentCycles => R20"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.BC, endIf33,
        new Register(21, RegisterField.dw), 0).setComment("tmpWAIT_TICK_DW_0_cyclesLeft => R21"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.XOR,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw), 1).setComment(
        "tmpWAIT_TICK_DW_0_cyclesLeft => R21"));
    ce.visitLabel(endIf33);

    ce.visitLabel(startWhile34);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile36,
        new Register(21, RegisterField.dw), 0).setComment("tmpWAIT_TICK_DW_0_cyclesLeft => R21"));
    ce.visitLabel(startWhileBody35);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw), 2).setComment(
        "tmpWAIT_TICK_DW_0_cyclesLeft => R21"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody35,
            new Register(21, RegisterField.dw), 0).setComment(
            "tmpWAIT_TICK_DW_0_cyclesLeft => R21"));
    ce.visitLabel(endWhile36);


    ce.visitLabel(endIf31);

    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.STORE,
        new Register(21, RegisterField.dw)).setAddress(
        new Register(19, RegisterField.dw)).setOffset(0).setLength(4).encode().setComment(
        "Load cycle count, 1+wdcnt*2==3 cycles, tmpWAIT_TICK_DW_0_cyclesLeft => R21, tmpWAIT_TICK_DW_0_controlRegisterAddress => R19"));
    //
    // End WAIT_TICK_DW
    // Call SYS_PRU0_OUTPUTS
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.AND,
        new Register(14, RegisterField.b2), new Register(30, RegisterField.b3), 207).setComment(
        "sys_outputs_tmp => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(14, RegisterField.b3), new Register(14, RegisterField.b1), 4).setComment(
        "sys_outputs_tmp2 => R14.b3, sys_outputs_out1 => R14.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.OR,
        new Register(14, RegisterField.b2), new Register(14, RegisterField.b2),
        new Register(14, RegisterField.b3)).setComment(
        "sys_outputs_tmp => R14.b2, sys_outputs_tmp2 => R14.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(14, RegisterField.b3), new Register(9, RegisterField.b0), 5).setComment(
        "sys_outputs_tmp2 => R14.b3, sys_outputs_out2 => R9.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.OR,
        new Register(14, RegisterField.b2), new Register(14, RegisterField.b2),
        new Register(14, RegisterField.b3)).setComment(
        "sys_outputs_tmp => R14.b2, sys_outputs_tmp2 => R14.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(30, RegisterField.b3), new Register(14, RegisterField.b2), 0).setComment(
        "sys_outputs_tmp => R14.b2"));

    //
    // End SYS_PRU0_OUTPUTS
    //
    // Call SYS_PRU0_PROCESS_INPUTS
    // Call SYS_PRU0_CURRENT_TIME
    ce.visitInstruction(
        new LdiInstruction(new Register(10, RegisterField.dw), (short) 28684).setComment(
            "sys_current_time_controlReg => R10"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(11, RegisterField.dw)).setAddress(
        new Register(10, RegisterField.dw)).setOffset(0).setLength(4).encode().setComment(
        "sys_current_time_cpuCycles => R11, sys_current_time_controlReg => R10"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(12, RegisterField.dw), new Register(11, RegisterField.dw),
        new Register(3, RegisterField.dw)).setComment(
        "sys_current_time_totalCycles => R12, sys_current_time_cpuCycles => R11, sys_current_time_offset => R3"));
    //
    // End SYS_PRU0_CURRENT_TIME
    // Call SYS_PRU0_RAW_INPUTS
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(9, RegisterField.b1), new Register(31, RegisterField.dw), 21).setComment(
        "IN_1 хранится в 21-ом бите, поэтому сдвигаем вправо на 21, sys_inputs_rawInputs_in1 => R9.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.AND,
        new Register(9, RegisterField.b1), new Register(9, RegisterField.b1), 1).setComment(
        "получаем значение IN_1, sys_inputs_rawInputs_in1 => R9.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(9, RegisterField.b2), new Register(31, RegisterField.dw), 22).setComment(
        "IN_2 хранится в 22-ом бите, поэтому сдвигаем вправо на 22, sys_inputs_rawInputs_in2 => R9.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.AND,
        new Register(9, RegisterField.b2), new Register(9, RegisterField.b2), 1).setComment(
        "получаем значение IN_2, sys_inputs_rawInputs_in2 => R9.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(9, RegisterField.b3), new Register(31, RegisterField.dw), 2).setComment(
        "IN_3 хранится в 2-ом бите, поэтому сдвигаем вправо на 2, sys_inputs_rawInputs_in3 => R9.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.AND,
        new Register(9, RegisterField.b3), new Register(9, RegisterField.b3), 1).setComment(
        "получаем значение IN_3, sys_inputs_rawInputs_in3 => R9.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(13, RegisterField.b0), new Register(31, RegisterField.dw), 3).setComment(
        "IN_4 хранится в 3-ем бите, поэтому сдвигаем вправо на 3, sys_inputs_rawInputs_in4 => R13.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.AND,
        new Register(13, RegisterField.b0), new Register(13, RegisterField.b0), 1).setComment(
        "получаем значение IN_4, sys_inputs_rawInputs_in4 => R13.b0"));

    // End SYS_PRU0_RAW_INPUTS
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.b1), new Register(9, RegisterField.b1), 0).setComment(
        "sys_inputs_in1 => R13.b1, sys_inputs_rawInputs_in1 => R9.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.b2), new Register(9, RegisterField.b2), 0).setComment(
        "sys_inputs_in2 => R13.b2, sys_inputs_rawInputs_in2 => R9.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.b3), new Register(9, RegisterField.b3), 0).setComment(
        "sys_inputs_in3 => R13.b3, sys_inputs_rawInputs_in3 => R9.b3"));
    // Call PRU_DEBOUNCE
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.b0), new Register(13, RegisterField.b0), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0, sys_inputs_rawInputs_in4 => R13.b0"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.w0), (short) 16960).setComment(
            "sys_inputs_tmpPRU_DEBOUNCE_0_debounce => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.w2), (short) 15).setComment(""));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if38,
        new Register(8, RegisterField.b3), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_outputIsChanging => R8.b3"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, elsIf42,
        new Register(14, RegisterField.b0), new Register(8, RegisterField.b2)).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0, sys_inputs_tmpPRU_DEBOUNCE_0_out => R8.b2"));
    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf37,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if38);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if40,
        new Register(14, RegisterField.b0), new Register(8, RegisterField.b1)).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0, sys_inputs_tmpPRU_DEBOUNCE_0_newVal => R8.b1"));
    // Значение не менялось -- смотрим сколько времени прошло
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(16, RegisterField.dw), new Register(12, RegisterField.dw),
        new Register(4, RegisterField.dw)).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_diff => R16, sys_current_time_totalCycles => R12, sys_inputs_tmpPRU_DEBOUNCE_0_prevUpdateTime => R4"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf41,
        new Register(16, RegisterField.dw), new Register(15, RegisterField.dw)).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_diff => R16, sys_inputs_tmpPRU_DEBOUNCE_0_debounce => R15"));
    // Если прошло более debounce тактов, то фильтрация окончена
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(8, RegisterField.b2), new Register(14, RegisterField.b0), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_out => R8.b2, sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b3), (short) 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_outputIsChanging => R8.b3"));

    ce.visitLabel(endIf41);


    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf39,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if40);
    // Если значение снова изменилось, начинаем считать сначала
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(8, RegisterField.b1), new Register(14, RegisterField.b0), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_newVal => R8.b1, sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(4, RegisterField.dw), new Register(12, RegisterField.dw), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_prevUpdateTime => R4, sys_current_time_totalCycles => R12"));

    ce.visitLabel(endIf39);


    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf37,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(elsIf42);
    // Если значение на входе изменилось, то запускаем отсчёт времени
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(8, RegisterField.b1), new Register(14, RegisterField.b0), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_newVal => R8.b1, sys_inputs_tmpPRU_DEBOUNCE_0_in => R14.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(4, RegisterField.dw), new Register(12, RegisterField.dw), 0).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_prevUpdateTime => R4, sys_current_time_totalCycles => R12"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b3), (short) 1).setComment(
        "sys_inputs_tmpPRU_DEBOUNCE_0_outputIsChanging => R8.b3"));

    ce.visitLabel(endIf37);

    // End PRU_DEBOUNCE
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.b0), new Register(8, RegisterField.b2), 0).setComment(
        "sys_inputs_in4 => R18.b0, sys_inputs_tmpPRU_DEBOUNCE_0_out => R8.b2"));
    //
    //
    //
    // End SYS_PRU0_PROCESS_INPUTS

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, startWhileBody7,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(endWhile8);


  }
}
