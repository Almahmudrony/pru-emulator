package st61131.pru;

/*Generated by MPS */

import com.github.vlsi.pru.plc110.ArithmeticInstruction;
import com.github.vlsi.pru.plc110.CodeEmitter;
import com.github.vlsi.pru.plc110.Label;
import com.github.vlsi.pru.plc110.LdiInstruction;
import com.github.vlsi.pru.plc110.LeftMostBitDetectInstruction;
import com.github.vlsi.pru.plc110.QuickBranchInstruction;
import com.github.vlsi.pru.plc110.Register;
import com.github.vlsi.pru.plc110.RegisterField;

import java.util.function.Consumer;

public class PRU_STEPPER_CodeGenerator implements Consumer<CodeEmitter> {
  @Override
  public void accept(CodeEmitter ce) {
    Label if2 = new Label("if2");
    Label if6 = new Label("if6");
    Label endIf5 = new Label("endIf5");
    Label startWhileBody7 = new Label("startWhileBody7");
    Label endIf9 = new Label("endIf9");
    Label endWhile8 = new Label("endWhile8");
    Label startWhileBody10 = new Label("startWhileBody10");
    Label endIf13 = new Label("endIf13");
    Label endIf12 = new Label("endIf12");
    Label endIf14 = new Label("endIf14");
    Label endWhile11 = new Label("endWhile11");
    Label if4 = new Label("if4");
    Label endIf3 = new Label("endIf3");
    Label elsIf17 = new Label("elsIf17");
    Label if16 = new Label("if16");
    Label endIf15 = new Label("endIf15");
    Label endIf1 = new Label("endIf1");
    Label endIf0 = new Label("endIf0");
    Label if19 = new Label("if19");
    Label endIf20 = new Label("endIf20");
    Label elsIf81 = new Label("elsIf81");
    Label if22 = new Label("if22");
    Label endIf21 = new Label("endIf21");
    Label startWhileBody23 = new Label("startWhileBody23");
    Label endIf25 = new Label("endIf25");
    Label endWhile24 = new Label("endWhile24");
    Label if30 = new Label("if30");
    Label endIf29 = new Label("endIf29");
    Label startWhileBody31 = new Label("startWhileBody31");
    Label endIf33 = new Label("endIf33");
    Label endWhile32 = new Label("endWhile32");
    Label startWhileBody34 = new Label("startWhileBody34");
    Label endWhile35 = new Label("endWhile35");
    Label startRepeat36 = new Label("startRepeat36");
    Label endIf37 = new Label("endIf37");
    Label endIf38 = new Label("endIf38");
    Label startWhileBody39 = new Label("startWhileBody39");
    Label endIf41 = new Label("endIf41");
    Label endWhile40 = new Label("endWhile40");
    Label if44 = new Label("if44");
    Label endIf43 = new Label("endIf43");
    Label startWhileBody45 = new Label("startWhileBody45");
    Label endIf47 = new Label("endIf47");
    Label endWhile46 = new Label("endWhile46");
    Label startWhileBody48 = new Label("startWhileBody48");
    Label endIf51 = new Label("endIf51");
    Label endIf50 = new Label("endIf50");
    Label endIf52 = new Label("endIf52");
    Label endWhile49 = new Label("endWhile49");
    Label endIf53 = new Label("endIf53");
    Label if55 = new Label("if55");
    Label endIf54 = new Label("endIf54");
    Label startWhileBody56 = new Label("startWhileBody56");
    Label endIf58 = new Label("endIf58");
    Label endWhile57 = new Label("endWhile57");
    Label startWhileBody59 = new Label("startWhileBody59");
    Label endIf62 = new Label("endIf62");
    Label endIf61 = new Label("endIf61");
    Label endIf63 = new Label("endIf63");
    Label endWhile60 = new Label("endWhile60");
    Label endIf64 = new Label("endIf64");
    Label if68 = new Label("if68");
    Label endIf67 = new Label("endIf67");
    Label startWhileBody69 = new Label("startWhileBody69");
    Label endIf71 = new Label("endIf71");
    Label endWhile70 = new Label("endWhile70");
    Label startWhileBody72 = new Label("startWhileBody72");
    Label endIf75 = new Label("endIf75");
    Label endIf74 = new Label("endIf74");
    Label endIf76 = new Label("endIf76");
    Label endWhile73 = new Label("endWhile73");
    Label if66 = new Label("if66");
    Label endIf65 = new Label("endIf65");
    Label endIf42 = new Label("endIf42");
    Label if78 = new Label("if78");
    Label endIf77 = new Label("endIf77");
    Label if28 = new Label("if28");
    Label elsIf79 = new Label("elsIf79");
    Label elsIf80 = new Label("elsIf80");
    Label endIf27 = new Label("endIf27");
    Label endIf26 = new Label("endIf26");
    Label elsIf85 = new Label("elsIf85");
    Label if83 = new Label("if83");
    Label elsIf84 = new Label("elsIf84");
    Label endIf82 = new Label("endIf82");
    Label elsIf103 = new Label("elsIf103");
    Label if87 = new Label("if87");
    Label endIf86 = new Label("endIf86");
    Label ne88 = new Label("ne88");
    Label if90 = new Label("if90");
    Label endIf89 = new Label("endIf89");
    Label if92 = new Label("if92");
    Label endIf91 = new Label("endIf91");
    Label startWhileBody93 = new Label("startWhileBody93");
    Label endIf95 = new Label("endIf95");
    Label endWhile94 = new Label("endWhile94");
    Label if97 = new Label("if97");
    Label endIf96 = new Label("endIf96");
    Label endIf100 = new Label("endIf100");
    Label endIf101 = new Label("endIf101");
    Label if99 = new Label("if99");
    Label endIf102 = new Label("endIf102");
    Label endIf98 = new Label("endIf98");
    Label endIf18 = new Label("endIf18");
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, endIf0,
        new Register(8, RegisterField.b1), 0).setComment("enable => R8.b1"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if2,
        new Register(8, RegisterField.b0), 1).setComment("state => R8.b0"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, elsIf17,
        new Register(8, RegisterField.b0), 2).setComment("state => R8.b0"));
    ce.visitInstruction(new QuickBranchInstruction(endIf1).setComment(""));
    ce.visitLabel(if2);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if4,
        new Register(11, RegisterField.dw), 0).setComment("decel_ramp => R11"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 3).setComment(
        "state => R8.b0"));
    ce.visitInstruction(new LdiInstruction(new Register(1, RegisterField.dw), (short) 0).setComment(
        "accelCalc_rest => R1"));
    // accel_count*accel_ram = decel_count*decel_ramp
    // decel_count == accel_count*accel_ram/decel_ramp
    // Call PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.dw), new Register(2, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_0_x => R13, accel_count => R2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.dw), new Register(10, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_0_y => R14, accel_ramp => R10"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(15, RegisterField.dw), new Register(11, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_0_z => R15, decel_ramp => R11"));
    // http://stackoverflow.com/a/4144956/1261287
    ce.visitInstruction(
        new LdiInstruction(new Register(16, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MULDIV_0_div => R16"));
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MULDIV_0_mod => R17"));
    // Call PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(15, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_0_tmpPRU_DIV_3_y => R18, tmpPRU_MULDIV_0_z => R15"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(8, RegisterField.b2),
        new Register(14, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_MULDIV_0_tmpPRU_DIV_3_bitX => R8.b2, tmpPRU_MULDIV_0_tmpPRU_DIV_3_x => R14"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(8, RegisterField.b3),
        new Register(18, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_MULDIV_0_tmpPRU_DIV_3_bitY => R8.b3, tmpPRU_MULDIV_0_tmpPRU_DIV_3_y => R18"));

    ce.visitInstruction(
        new LdiInstruction(new Register(19, RegisterField.dw), (short) 1).setComment(
            "tmpPRU_MULDIV_0_tmpPRU_DIV_3_mask => R19"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if6,
        new Register(8, RegisterField.b3), new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_MULDIV_0_tmpPRU_DIV_3_bitY => R8.b3, tmpPRU_MULDIV_0_tmpPRU_DIV_3_bitX => R8.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(18, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_0_tmpPRU_DIV_3_b => R20, tmpPRU_MULDIV_0_tmpPRU_DIV_3_y => R18"));

    ce.visitInstruction(new QuickBranchInstruction(endIf5).setComment(""));
    ce.visitLabel(if6);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(8, RegisterField.b2), new Register(8, RegisterField.b2),
        new Register(8, RegisterField.b3)).setComment(
        "tmpPRU_MULDIV_0_tmpPRU_DIV_3_diff => R8.b2, tmpPRU_MULDIV_0_tmpPRU_DIV_3_bitX => R8.b2, tmpPRU_MULDIV_0_tmpPRU_DIV_3_bitY => R8.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(20, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_MULDIV_0_tmpPRU_DIV_3_b => R20, tmpPRU_MULDIV_0_tmpPRU_DIV_3_y => R18, tmpPRU_MULDIV_0_tmpPRU_DIV_3_diff => R8.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw),
        new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_MULDIV_0_tmpPRU_DIV_3_mask => R19, tmpPRU_MULDIV_0_tmpPRU_DIV_3_diff => R8.b2"));

    ce.visitLabel(endIf5);

    ce.visitInstruction(
        new LdiInstruction(new Register(18, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MULDIV_0_tmpPRU_DIV_3_div => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile8,
        new Register(19, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_0_tmpPRU_DIV_3_mask => R19"));
    ce.visitLabel(startWhileBody7);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf9,
        new Register(14, RegisterField.dw), new Register(20, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_0_tmpPRU_DIV_3_a => R14, tmpPRU_MULDIV_0_tmpPRU_DIV_3_b => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_0_tmpPRU_DIV_3_div => R18, tmpPRU_MULDIV_0_tmpPRU_DIV_3_mask => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(14, RegisterField.dw), new Register(14, RegisterField.dw),
        new Register(20, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_0_tmpPRU_DIV_3_a => R14, tmpPRU_MULDIV_0_tmpPRU_DIV_3_b => R20"));

    ce.visitLabel(endIf9);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_0_tmpPRU_DIV_3_mask => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_0_tmpPRU_DIV_3_b => R20"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody7,
            new Register(19, RegisterField.dw), 0).setComment(
            "tmpPRU_MULDIV_0_tmpPRU_DIV_3_mask => R19"));
    ce.visitLabel(endWhile8);

    // End PRU_DIV
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile11,
        new Register(13, RegisterField.dw), 0).setComment("tmpPRU_MULDIV_0_a => R13"));
    ce.visitLabel(startWhileBody10);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.BC, endIf12,
        new Register(13, RegisterField.dw), 0).setComment("tmpPRU_MULDIV_0_a => R13"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(16, RegisterField.dw), new Register(16, RegisterField.dw),
        new Register(18, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_0_div => R16, tmpPRU_MULDIV_0_qn => R18"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(14, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_0_mod => R17, tmpPRU_MULDIV_0_rn => R14"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf13,
        new Register(17, RegisterField.dw), new Register(15, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_0_mod => R17, tmpPRU_MULDIV_0_z => R15"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(16, RegisterField.dw), new Register(16, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_0_div => R16"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(15, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_0_mod => R17, tmpPRU_MULDIV_0_z => R15"));

    ce.visitLabel(endIf13);


    ce.visitLabel(endIf12);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(13, RegisterField.dw), new Register(13, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_0_a => R13"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_0_qn => R18"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(14, RegisterField.dw), new Register(14, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_0_rn => R14"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf14,
        new Register(14, RegisterField.dw), new Register(15, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_0_rn => R14, tmpPRU_MULDIV_0_z => R15"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_0_qn => R18"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(14, RegisterField.dw), new Register(14, RegisterField.dw),
        new Register(15, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_0_rn => R14, tmpPRU_MULDIV_0_z => R15"));

    ce.visitLabel(endIf14);


    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody10,
            new Register(13, RegisterField.dw), 0).setComment("tmpPRU_MULDIV_0_a => R13"));
    ce.visitLabel(endWhile11);

    //
    // End PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(2, RegisterField.dw), new Register(16, RegisterField.dw), 0).setComment(
        "accel_count => R2, tmpPRU_MULDIV_0_div => R16"));

    ce.visitInstruction(new QuickBranchInstruction(endIf3).setComment(""));
    ce.visitLabel(if4);
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 4).setComment(
        "state => R8.b0"));

    ce.visitLabel(endIf3);

    //

    ce.visitInstruction(new QuickBranchInstruction(endIf1).setComment(""));
    ce.visitLabel(elsIf17);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if16,
        new Register(10, RegisterField.dw), 0).setComment("accel_ramp => R10"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if16,
        new Register(11, RegisterField.dw), 0).setComment("decel_ramp => R11"));

    // Если замедление на участке "макс скорости", то включаем тормоз по запланированому в начале графику
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 3).setComment(
        "state => R8.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(2, RegisterField.dw), new Register(3, RegisterField.dw), 0).setComment(
        "accel_count => R2, decel_val => R3"));

    ce.visitInstruction(new QuickBranchInstruction(endIf15).setComment(""));
    ce.visitLabel(if16);
    // Если тормозим без замедления, то просто останавливаемся
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 4).setComment(
        "state => R8.b0"));

    ce.visitLabel(endIf15);

    //

    ce.visitLabel(endIf1);

    ce.visitLabel(endIf0);

    //
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if19,
        new Register(8, RegisterField.b0), 4).setComment("state => R8.b0"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, elsIf81,
        new Register(8, RegisterField.b0), 0).setComment("state => R8.b0"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, elsIf85,
        new Register(8, RegisterField.b0), 2).setComment("state => R8.b0"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, elsIf103,
        new Register(8, RegisterField.b0), 1).setComment("state => R8.b0"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, elsIf103,
        new Register(8, RegisterField.b0), 3).setComment("state => R8.b0"));

    ce.visitInstruction(new QuickBranchInstruction(endIf18).setComment(""));
    ce.visitLabel(if19);
    // Ждём нового цикла
    ce.visitInstruction(new LdiInstruction(new Register(6, RegisterField.dw), (short) 0).setComment(
        "step_delay => R6"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, endIf20,
        new Register(8, RegisterField.b1), 0).setComment("enable => R8.b1"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 0).setComment(
        "state => R8.b0"));
    ce.visitLabel(endIf20);


    ce.visitInstruction(new QuickBranchInstruction(endIf18).setComment(""));
    ce.visitLabel(elsIf81);
    ce.visitInstruction(new LdiInstruction(new Register(5, RegisterField.dw), (short) 0).setComment(
        "step_count => R5"));
    ce.visitInstruction(new LdiInstruction(new Register(2, RegisterField.dw), (short) 0).setComment(
        "accel_count => R2"));
    ce.visitInstruction(new LdiInstruction(new Register(1, RegisterField.dw), (short) 0).setComment(
        "accelCalc_rest => R1"));
    ce.visitInstruction(
        new LdiInstruction(new Register(7, RegisterField.w0), (short) 65535).setComment(
            "v_decel_start => R7"));
    ce.visitInstruction(
        new LdiInstruction(new Register(7, RegisterField.w2), (short) 65535).setComment(""));
    // Call PRU_DIV
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.w0), (short) 53632).setComment(
            "tmpPRU_DIV_0_x => R13"));
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.w2), (short) 2288).setComment(""));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.dw), new Register(12, RegisterField.dw), 0).setComment(
        "tmpPRU_DIV_0_y => R14, max_speed => R12"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(8, RegisterField.b2),
        new Register(13, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_DIV_0_bitX => R8.b2, tmpPRU_DIV_0_x => R13"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(8, RegisterField.b3),
        new Register(14, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_DIV_0_bitY => R8.b3, tmpPRU_DIV_0_y => R14"));

    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 1).setComment(
            "tmpPRU_DIV_0_mask => R15"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if22,
        new Register(8, RegisterField.b3), new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_DIV_0_bitY => R8.b3, tmpPRU_DIV_0_bitX => R8.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(16, RegisterField.dw), new Register(14, RegisterField.dw), 0).setComment(
        "tmpPRU_DIV_0_b => R16, tmpPRU_DIV_0_y => R14"));

    ce.visitInstruction(new QuickBranchInstruction(endIf21).setComment(""));
    ce.visitLabel(if22);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(8, RegisterField.b2), new Register(8, RegisterField.b2),
        new Register(8, RegisterField.b3)).setComment(
        "tmpPRU_DIV_0_diff => R8.b2, tmpPRU_DIV_0_bitX => R8.b2, tmpPRU_DIV_0_bitY => R8.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(16, RegisterField.dw), new Register(14, RegisterField.dw),
        new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_DIV_0_b => R16, tmpPRU_DIV_0_y => R14, tmpPRU_DIV_0_diff => R8.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(15, RegisterField.dw), new Register(15, RegisterField.dw),
        new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_DIV_0_mask => R15, tmpPRU_DIV_0_diff => R8.b2"));

    ce.visitLabel(endIf21);

    ce.visitInstruction(
        new LdiInstruction(new Register(14, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_DIV_0_div => R14"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile24,
        new Register(15, RegisterField.dw), 0).setComment("tmpPRU_DIV_0_mask => R15"));
    ce.visitLabel(startWhileBody23);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf25,
        new Register(13, RegisterField.dw), new Register(16, RegisterField.dw)).setComment(
        "tmpPRU_DIV_0_a => R13, tmpPRU_DIV_0_b => R16"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.dw), new Register(14, RegisterField.dw),
        new Register(15, RegisterField.dw)).setComment(
        "tmpPRU_DIV_0_div => R14, tmpPRU_DIV_0_mask => R15"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(13, RegisterField.dw), new Register(13, RegisterField.dw),
        new Register(16, RegisterField.dw)).setComment(
        "tmpPRU_DIV_0_a => R13, tmpPRU_DIV_0_b => R16"));

    ce.visitLabel(endIf25);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(15, RegisterField.dw), new Register(15, RegisterField.dw), 1).setComment(
        "tmpPRU_DIV_0_mask => R15"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(16, RegisterField.dw), new Register(16, RegisterField.dw), 1).setComment(
        "tmpPRU_DIV_0_b => R16"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody23,
            new Register(15, RegisterField.dw), 0).setComment("tmpPRU_DIV_0_mask => R15"));
    ce.visitLabel(endWhile24);

    // Variable tmpPRU_DIV_0_mod was never used, thus optimized out instruction ADD
    // End PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(4, RegisterField.dw), new Register(14, RegisterField.dw), 0).setComment(
        "min_delay => R4, tmpPRU_DIV_0_div => R14"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endIf26,
        new Register(8, RegisterField.b1), 0).setComment("enable => R8.b1"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if28,
        new Register(9, RegisterField.dw), 0).setComment("quantity => R9"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GE, elsIf79,
        new Register(9, RegisterField.dw), 2).setComment("quantity => R9"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, elsIf80,
        new Register(10, RegisterField.dw), 0).setComment("accel_ramp => R10"));
    // Вычисление accel_start
    // c0 <- sqrt(2/accel_ramp)*0.676*freq; freq=150e6
    // c0 <- sqrt(2/accel_ramp)*101.4e6; 101.4e6 = 24755.86*4096
    // c0 <- sqrt(1225705208.6792002/accel_ramp)*4096;
    // c0 <- sqrt(4294967294/accel_ramp)*2188.1295 == sqrt(4294967294*4787911/accel_ramp);
    // 2188 == freq*0.676/sqrt(4294967294/2)
    // Call PRU_DIV
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.w0), (short) 65534).setComment(
            "tmpPRU_DIV_1_x => R13"));
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.w2), (short) 65535).setComment(""));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.dw), new Register(10, RegisterField.dw), 0).setComment(
        "tmpPRU_DIV_1_y => R14, accel_ramp => R10"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(8, RegisterField.b2),
        new Register(13, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_DIV_1_bitX => R8.b2, tmpPRU_DIV_1_x => R13"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(8, RegisterField.b3),
        new Register(14, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_DIV_1_bitY => R8.b3, tmpPRU_DIV_1_y => R14"));

    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 1).setComment(
            "tmpPRU_DIV_1_mask => R15"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if30,
        new Register(8, RegisterField.b3), new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_DIV_1_bitY => R8.b3, tmpPRU_DIV_1_bitX => R8.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(16, RegisterField.dw), new Register(14, RegisterField.dw), 0).setComment(
        "tmpPRU_DIV_1_b => R16, tmpPRU_DIV_1_y => R14"));

    ce.visitInstruction(new QuickBranchInstruction(endIf29).setComment(""));
    ce.visitLabel(if30);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(8, RegisterField.b2), new Register(8, RegisterField.b2),
        new Register(8, RegisterField.b3)).setComment(
        "tmpPRU_DIV_1_diff => R8.b2, tmpPRU_DIV_1_bitX => R8.b2, tmpPRU_DIV_1_bitY => R8.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(16, RegisterField.dw), new Register(14, RegisterField.dw),
        new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_DIV_1_b => R16, tmpPRU_DIV_1_y => R14, tmpPRU_DIV_1_diff => R8.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(15, RegisterField.dw), new Register(15, RegisterField.dw),
        new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_DIV_1_mask => R15, tmpPRU_DIV_1_diff => R8.b2"));

    ce.visitLabel(endIf29);

    ce.visitInstruction(
        new LdiInstruction(new Register(14, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_DIV_1_div => R14"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile32,
        new Register(15, RegisterField.dw), 0).setComment("tmpPRU_DIV_1_mask => R15"));
    ce.visitLabel(startWhileBody31);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf33,
        new Register(13, RegisterField.dw), new Register(16, RegisterField.dw)).setComment(
        "tmpPRU_DIV_1_a => R13, tmpPRU_DIV_1_b => R16"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.dw), new Register(14, RegisterField.dw),
        new Register(15, RegisterField.dw)).setComment(
        "tmpPRU_DIV_1_div => R14, tmpPRU_DIV_1_mask => R15"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(13, RegisterField.dw), new Register(13, RegisterField.dw),
        new Register(16, RegisterField.dw)).setComment(
        "tmpPRU_DIV_1_a => R13, tmpPRU_DIV_1_b => R16"));

    ce.visitLabel(endIf33);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(15, RegisterField.dw), new Register(15, RegisterField.dw), 1).setComment(
        "tmpPRU_DIV_1_mask => R15"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(16, RegisterField.dw), new Register(16, RegisterField.dw), 1).setComment(
        "tmpPRU_DIV_1_b => R16"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody31,
            new Register(15, RegisterField.dw), 0).setComment("tmpPRU_DIV_1_mask => R15"));
    ce.visitLabel(endWhile32);

    // Variable tmpPRU_DIV_1_mod was never used, thus optimized out instruction ADD
    // End PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(6, RegisterField.dw), new Register(14, RegisterField.dw), 0).setComment(
        "step_delay => R6, tmpPRU_DIV_1_div => R14"));
    // Call PRU_SQRT
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.dw), new Register(6, RegisterField.dw), 0).setComment(
        "tmpPRU_SQRT_0_x => R13, step_delay => R6"));
    // https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#cite_ref-3
    // Fast integer square root by Mr. Woo's abacus algorithm (archived)
    ce.visitInstruction(
        new LdiInstruction(new Register(14, RegisterField.w0), (short) 0).setComment(
            "tmpPRU_SQRT_0_q2 => R14"));
    ce.visitInstruction(
        new LdiInstruction(new Register(14, RegisterField.w2), (short) 16384).setComment(""));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(15, RegisterField.dw), new Register(13, RegisterField.dw), 0).setComment(
        "tmpPRU_SQRT_0_v_x => R15, tmpPRU_SQRT_0_x => R13"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GE, endWhile35,
        new Register(14, RegisterField.dw), new Register(15, RegisterField.dw)).setComment(
        "tmpPRU_SQRT_0_q2 => R14, tmpPRU_SQRT_0_v_x => R15"));
    ce.visitLabel(startWhileBody34);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(14, RegisterField.dw), new Register(14, RegisterField.dw), 2).setComment(
        "tmpPRU_SQRT_0_q2 => R14"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.LT, startWhileBody34,
            new Register(14, RegisterField.dw), new Register(15, RegisterField.dw)).setComment(
            "tmpPRU_SQRT_0_q2 => R14, tmpPRU_SQRT_0_v_x => R15"));
    ce.visitLabel(endWhile35);

    ce.visitInstruction(
        new LdiInstruction(new Register(16, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_SQRT_0_sqrt => R16"));
    ce.visitLabel(startRepeat36);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(16, RegisterField.dw),
        new Register(14, RegisterField.dw)).setComment(
        "tmpPRU_SQRT_0_sum => R17, tmpPRU_SQRT_0_sqrt => R16, tmpPRU_SQRT_0_q2 => R14"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(16, RegisterField.dw), new Register(16, RegisterField.dw), 1).setComment(
        "tmpPRU_SQRT_0_sqrt => R16"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf37,
        new Register(15, RegisterField.dw), new Register(17, RegisterField.dw)).setComment(
        "tmpPRU_SQRT_0_v_x => R15, tmpPRU_SQRT_0_sum => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(15, RegisterField.dw), new Register(15, RegisterField.dw),
        new Register(17, RegisterField.dw)).setComment(
        "tmpPRU_SQRT_0_v_x => R15, tmpPRU_SQRT_0_sum => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(16, RegisterField.dw), new Register(16, RegisterField.dw),
        new Register(14, RegisterField.dw)).setComment(
        "tmpPRU_SQRT_0_sqrt => R16, tmpPRU_SQRT_0_q2 => R14"));

    ce.visitLabel(endIf37);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(14, RegisterField.dw), new Register(14, RegisterField.dw), 2).setComment(
        "tmpPRU_SQRT_0_q2 => R14"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startRepeat36,
            new Register(14, RegisterField.dw), 0).setComment("tmpPRU_SQRT_0_q2 => R14"));

    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.LE, endIf38,
        new Register(16, RegisterField.dw), new Register(13, RegisterField.dw)).setComment(
        "tmpPRU_SQRT_0_sqrt => R16, tmpPRU_SQRT_0_x => R13"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(16, RegisterField.dw), new Register(16, RegisterField.dw), 1).setComment(
        "tmpPRU_SQRT_0_sqrt => R16"));
    ce.visitLabel(endIf38);

    // End PRU_SQRT
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(6, RegisterField.dw), new Register(16, RegisterField.dw), 0).setComment(
        "step_delay => R6, tmpPRU_SQRT_0_sqrt => R16"));
    // Call PRU_MUL
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.dw), new Register(6, RegisterField.dw), 0).setComment(
        "tmpPRU_MUL_0_x => R13, step_delay => R6"));
    ce.visitInstruction(
        new LdiInstruction(new Register(8, RegisterField.w2), (short) 2188).setComment(
            "tmpPRU_MUL_0_y => R8.w2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.MIN,
        new Register(14, RegisterField.dw), new Register(13, RegisterField.dw),
        new Register(8, RegisterField.w2)).setComment(
        "tmpPRU_MUL_0_a => R14, tmpPRU_MUL_0_x => R13, tmpPRU_MUL_0_y => R8.w2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.MAX,
        new Register(13, RegisterField.dw), new Register(13, RegisterField.dw),
        new Register(8, RegisterField.w2)).setComment(
        "tmpPRU_MUL_0_b => R13, tmpPRU_MUL_0_x => R13, tmpPRU_MUL_0_y => R8.w2"));

    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MUL_0_mul => R15"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile40,
        new Register(14, RegisterField.dw), 0).setComment("tmpPRU_MUL_0_a => R14"));
    ce.visitLabel(startWhileBody39);
    // LMBD?
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.BC, endIf41,
        new Register(14, RegisterField.dw), 0).setComment("tmpPRU_MUL_0_a => R14"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(15, RegisterField.dw), new Register(15, RegisterField.dw),
        new Register(13, RegisterField.dw)).setComment(
        "tmpPRU_MUL_0_mul => R15, tmpPRU_MUL_0_b => R13"));
    ce.visitLabel(endIf41);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(14, RegisterField.dw), new Register(14, RegisterField.dw), 1).setComment(
        "tmpPRU_MUL_0_a => R14"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(13, RegisterField.dw), new Register(13, RegisterField.dw), 1).setComment(
        "tmpPRU_MUL_0_b => R13"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody39,
            new Register(14, RegisterField.dw), 0).setComment("tmpPRU_MUL_0_a => R14"));
    ce.visitLabel(endWhile40);

    // End PRU_MUL
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(6, RegisterField.dw), new Register(15, RegisterField.dw), 0).setComment(
        "step_delay => R6, tmpPRU_MUL_0_mul => R15"));
    // speed <- freq/min_delay
    // n <- v^2/2a == muldiv(v,v,2a)
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endIf42,
        new Register(11, RegisterField.dw), 0).setComment("decel_ramp => R11"));
    // Если нужно торможение, то вычисляем его
    // Call PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.dw), new Register(12, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_1_x => R13, max_speed => R12"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.dw), new Register(12, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_1_y => R14, max_speed => R12"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(15, RegisterField.dw), new Register(10, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_1_z => R15, accel_ramp => R10"));
    // http://stackoverflow.com/a/4144956/1261287
    ce.visitInstruction(
        new LdiInstruction(new Register(16, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MULDIV_1_div => R16"));
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MULDIV_1_mod => R17"));
    // Call PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(15, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_1_tmpPRU_DIV_3_y => R18, tmpPRU_MULDIV_1_z => R15"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(8, RegisterField.b2),
        new Register(14, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_MULDIV_1_tmpPRU_DIV_3_bitX => R8.b2, tmpPRU_MULDIV_1_tmpPRU_DIV_3_x => R14"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(8, RegisterField.b3),
        new Register(18, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_MULDIV_1_tmpPRU_DIV_3_bitY => R8.b3, tmpPRU_MULDIV_1_tmpPRU_DIV_3_y => R18"));

    ce.visitInstruction(
        new LdiInstruction(new Register(19, RegisterField.dw), (short) 1).setComment(
            "tmpPRU_MULDIV_1_tmpPRU_DIV_3_mask => R19"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if44,
        new Register(8, RegisterField.b3), new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_MULDIV_1_tmpPRU_DIV_3_bitY => R8.b3, tmpPRU_MULDIV_1_tmpPRU_DIV_3_bitX => R8.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(18, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_1_tmpPRU_DIV_3_b => R20, tmpPRU_MULDIV_1_tmpPRU_DIV_3_y => R18"));

    ce.visitInstruction(new QuickBranchInstruction(endIf43).setComment(""));
    ce.visitLabel(if44);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(8, RegisterField.b2), new Register(8, RegisterField.b2),
        new Register(8, RegisterField.b3)).setComment(
        "tmpPRU_MULDIV_1_tmpPRU_DIV_3_diff => R8.b2, tmpPRU_MULDIV_1_tmpPRU_DIV_3_bitX => R8.b2, tmpPRU_MULDIV_1_tmpPRU_DIV_3_bitY => R8.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(20, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_MULDIV_1_tmpPRU_DIV_3_b => R20, tmpPRU_MULDIV_1_tmpPRU_DIV_3_y => R18, tmpPRU_MULDIV_1_tmpPRU_DIV_3_diff => R8.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw),
        new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_MULDIV_1_tmpPRU_DIV_3_mask => R19, tmpPRU_MULDIV_1_tmpPRU_DIV_3_diff => R8.b2"));

    ce.visitLabel(endIf43);

    ce.visitInstruction(
        new LdiInstruction(new Register(18, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MULDIV_1_tmpPRU_DIV_3_div => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile46,
        new Register(19, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_1_tmpPRU_DIV_3_mask => R19"));
    ce.visitLabel(startWhileBody45);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf47,
        new Register(14, RegisterField.dw), new Register(20, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_1_tmpPRU_DIV_3_a => R14, tmpPRU_MULDIV_1_tmpPRU_DIV_3_b => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_1_tmpPRU_DIV_3_div => R18, tmpPRU_MULDIV_1_tmpPRU_DIV_3_mask => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(14, RegisterField.dw), new Register(14, RegisterField.dw),
        new Register(20, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_1_tmpPRU_DIV_3_a => R14, tmpPRU_MULDIV_1_tmpPRU_DIV_3_b => R20"));

    ce.visitLabel(endIf47);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_1_tmpPRU_DIV_3_mask => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_1_tmpPRU_DIV_3_b => R20"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody45,
            new Register(19, RegisterField.dw), 0).setComment(
            "tmpPRU_MULDIV_1_tmpPRU_DIV_3_mask => R19"));
    ce.visitLabel(endWhile46);

    // End PRU_DIV
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile49,
        new Register(13, RegisterField.dw), 0).setComment("tmpPRU_MULDIV_1_a => R13"));
    ce.visitLabel(startWhileBody48);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.BC, endIf50,
        new Register(13, RegisterField.dw), 0).setComment("tmpPRU_MULDIV_1_a => R13"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(16, RegisterField.dw), new Register(16, RegisterField.dw),
        new Register(18, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_1_div => R16, tmpPRU_MULDIV_1_qn => R18"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(14, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_1_mod => R17, tmpPRU_MULDIV_1_rn => R14"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf51,
        new Register(17, RegisterField.dw), new Register(15, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_1_mod => R17, tmpPRU_MULDIV_1_z => R15"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(16, RegisterField.dw), new Register(16, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_1_div => R16"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(15, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_1_mod => R17, tmpPRU_MULDIV_1_z => R15"));

    ce.visitLabel(endIf51);


    ce.visitLabel(endIf50);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(13, RegisterField.dw), new Register(13, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_1_a => R13"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_1_qn => R18"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(14, RegisterField.dw), new Register(14, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_1_rn => R14"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf52,
        new Register(14, RegisterField.dw), new Register(15, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_1_rn => R14, tmpPRU_MULDIV_1_z => R15"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_1_qn => R18"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(14, RegisterField.dw), new Register(14, RegisterField.dw),
        new Register(15, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_1_rn => R14, tmpPRU_MULDIV_1_z => R15"));

    ce.visitLabel(endIf52);


    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody48,
            new Register(13, RegisterField.dw), 0).setComment("tmpPRU_MULDIV_1_a => R13"));
    ce.visitLabel(endWhile49);

    //
    // End PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.dw), new Register(16, RegisterField.dw), 0).setComment(
        "max_s_lim => R13, tmpPRU_MULDIV_1_div => R16"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, endIf53,
        new Register(13, RegisterField.dw), 0).setComment("max_s_lim => R13"));
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.dw), (short) 1).setComment(
            "max_s_lim => R13"));
    ce.visitLabel(endIf53);

    // Call PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.dw), new Register(9, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_2_x => R14, quantity => R9"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(15, RegisterField.dw), new Register(11, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_2_y => R15, decel_ramp => R11"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(16, RegisterField.dw), new Register(10, RegisterField.dw),
        new Register(11, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_2_z => R16, accel_ramp => R10, decel_ramp => R11"));
    // http://stackoverflow.com/a/4144956/1261287
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MULDIV_2_div => R17"));
    ce.visitInstruction(
        new LdiInstruction(new Register(18, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MULDIV_2_mod => R18"));
    // Call PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(19, RegisterField.dw), new Register(16, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_2_tmpPRU_DIV_3_y => R19, tmpPRU_MULDIV_2_z => R16"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(8, RegisterField.b2),
        new Register(15, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_MULDIV_2_tmpPRU_DIV_3_bitX => R8.b2, tmpPRU_MULDIV_2_tmpPRU_DIV_3_x => R15"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(8, RegisterField.b3),
        new Register(19, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_MULDIV_2_tmpPRU_DIV_3_bitY => R8.b3, tmpPRU_MULDIV_2_tmpPRU_DIV_3_y => R19"));

    ce.visitInstruction(
        new LdiInstruction(new Register(20, RegisterField.dw), (short) 1).setComment(
            "tmpPRU_MULDIV_2_tmpPRU_DIV_3_mask => R20"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if55,
        new Register(8, RegisterField.b3), new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_MULDIV_2_tmpPRU_DIV_3_bitY => R8.b3, tmpPRU_MULDIV_2_tmpPRU_DIV_3_bitX => R8.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(21, RegisterField.dw), new Register(19, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_2_tmpPRU_DIV_3_b => R21, tmpPRU_MULDIV_2_tmpPRU_DIV_3_y => R19"));

    ce.visitInstruction(new QuickBranchInstruction(endIf54).setComment(""));
    ce.visitLabel(if55);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(8, RegisterField.b2), new Register(8, RegisterField.b2),
        new Register(8, RegisterField.b3)).setComment(
        "tmpPRU_MULDIV_2_tmpPRU_DIV_3_diff => R8.b2, tmpPRU_MULDIV_2_tmpPRU_DIV_3_bitX => R8.b2, tmpPRU_MULDIV_2_tmpPRU_DIV_3_bitY => R8.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(21, RegisterField.dw), new Register(19, RegisterField.dw),
        new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_MULDIV_2_tmpPRU_DIV_3_b => R21, tmpPRU_MULDIV_2_tmpPRU_DIV_3_y => R19, tmpPRU_MULDIV_2_tmpPRU_DIV_3_diff => R8.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw),
        new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_MULDIV_2_tmpPRU_DIV_3_mask => R20, tmpPRU_MULDIV_2_tmpPRU_DIV_3_diff => R8.b2"));

    ce.visitLabel(endIf54);

    ce.visitInstruction(
        new LdiInstruction(new Register(19, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MULDIV_2_tmpPRU_DIV_3_div => R19"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile57,
        new Register(20, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_2_tmpPRU_DIV_3_mask => R20"));
    ce.visitLabel(startWhileBody56);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf58,
        new Register(15, RegisterField.dw), new Register(21, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_2_tmpPRU_DIV_3_a => R15, tmpPRU_MULDIV_2_tmpPRU_DIV_3_b => R21"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw),
        new Register(20, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_2_tmpPRU_DIV_3_div => R19, tmpPRU_MULDIV_2_tmpPRU_DIV_3_mask => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(15, RegisterField.dw), new Register(15, RegisterField.dw),
        new Register(21, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_2_tmpPRU_DIV_3_a => R15, tmpPRU_MULDIV_2_tmpPRU_DIV_3_b => R21"));

    ce.visitLabel(endIf58);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_2_tmpPRU_DIV_3_mask => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_2_tmpPRU_DIV_3_b => R21"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody56,
            new Register(20, RegisterField.dw), 0).setComment(
            "tmpPRU_MULDIV_2_tmpPRU_DIV_3_mask => R20"));
    ce.visitLabel(endWhile57);

    // End PRU_DIV
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile60,
        new Register(14, RegisterField.dw), 0).setComment("tmpPRU_MULDIV_2_a => R14"));
    ce.visitLabel(startWhileBody59);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.BC, endIf61,
        new Register(14, RegisterField.dw), 0).setComment("tmpPRU_MULDIV_2_a => R14"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_2_div => R17, tmpPRU_MULDIV_2_qn => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(15, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_2_mod => R18, tmpPRU_MULDIV_2_rn => R15"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf62,
        new Register(18, RegisterField.dw), new Register(16, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_2_mod => R18, tmpPRU_MULDIV_2_z => R16"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_2_div => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(16, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_2_mod => R18, tmpPRU_MULDIV_2_z => R16"));

    ce.visitLabel(endIf62);


    ce.visitLabel(endIf61);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(14, RegisterField.dw), new Register(14, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_2_a => R14"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_2_qn => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(15, RegisterField.dw), new Register(15, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_2_rn => R15"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf63,
        new Register(15, RegisterField.dw), new Register(16, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_2_rn => R15, tmpPRU_MULDIV_2_z => R16"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_2_qn => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(15, RegisterField.dw), new Register(15, RegisterField.dw),
        new Register(16, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_2_rn => R15, tmpPRU_MULDIV_2_z => R16"));

    ce.visitLabel(endIf63);


    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody59,
            new Register(14, RegisterField.dw), 0).setComment("tmpPRU_MULDIV_2_a => R14"));
    ce.visitLabel(endWhile60);

    //
    // End PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.dw), new Register(17, RegisterField.dw), 0).setComment(
        "accel_lim => R14, tmpPRU_MULDIV_2_div => R17"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, endIf64,
        new Register(14, RegisterField.dw), 0).setComment("accel_lim => R14"));
    ce.visitInstruction(
        new LdiInstruction(new Register(14, RegisterField.dw), (short) 1).setComment(
            "accel_lim => R14"));
    ce.visitLabel(endIf64);

    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GE, if66,
        new Register(14, RegisterField.dw), new Register(13, RegisterField.dw)).setComment(
        "accel_lim => R14, max_s_lim => R13"));
    // Call PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(15, RegisterField.dw), new Register(10, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_3_x => R15, accel_ramp => R10"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(16, RegisterField.dw), new Register(11, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_3_z => R16, decel_ramp => R11"));
    // http://stackoverflow.com/a/4144956/1261287
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MULDIV_3_div => R17"));
    ce.visitInstruction(
        new LdiInstruction(new Register(18, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MULDIV_3_mod => R18"));
    // Call PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(19, RegisterField.dw), new Register(16, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_3_tmpPRU_DIV_3_y => R19, tmpPRU_MULDIV_3_z => R16"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(8, RegisterField.b2),
        new Register(13, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_MULDIV_3_tmpPRU_DIV_3_bitX => R8.b2, tmpPRU_MULDIV_3_tmpPRU_DIV_3_x => R13"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(8, RegisterField.b3),
        new Register(19, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_MULDIV_3_tmpPRU_DIV_3_bitY => R8.b3, tmpPRU_MULDIV_3_tmpPRU_DIV_3_y => R19"));

    ce.visitInstruction(
        new LdiInstruction(new Register(20, RegisterField.dw), (short) 1).setComment(
            "tmpPRU_MULDIV_3_tmpPRU_DIV_3_mask => R20"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if68,
        new Register(8, RegisterField.b3), new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_MULDIV_3_tmpPRU_DIV_3_bitY => R8.b3, tmpPRU_MULDIV_3_tmpPRU_DIV_3_bitX => R8.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(21, RegisterField.dw), new Register(19, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_3_tmpPRU_DIV_3_b => R21, tmpPRU_MULDIV_3_tmpPRU_DIV_3_y => R19"));

    ce.visitInstruction(new QuickBranchInstruction(endIf67).setComment(""));
    ce.visitLabel(if68);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(8, RegisterField.b2), new Register(8, RegisterField.b2),
        new Register(8, RegisterField.b3)).setComment(
        "tmpPRU_MULDIV_3_tmpPRU_DIV_3_diff => R8.b2, tmpPRU_MULDIV_3_tmpPRU_DIV_3_bitX => R8.b2, tmpPRU_MULDIV_3_tmpPRU_DIV_3_bitY => R8.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(21, RegisterField.dw), new Register(19, RegisterField.dw),
        new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_MULDIV_3_tmpPRU_DIV_3_b => R21, tmpPRU_MULDIV_3_tmpPRU_DIV_3_y => R19, tmpPRU_MULDIV_3_tmpPRU_DIV_3_diff => R8.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw),
        new Register(8, RegisterField.b2)).setComment(
        "tmpPRU_MULDIV_3_tmpPRU_DIV_3_mask => R20, tmpPRU_MULDIV_3_tmpPRU_DIV_3_diff => R8.b2"));

    ce.visitLabel(endIf67);

    ce.visitInstruction(
        new LdiInstruction(new Register(19, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MULDIV_3_tmpPRU_DIV_3_div => R19"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile70,
        new Register(20, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_3_tmpPRU_DIV_3_mask => R20"));
    ce.visitLabel(startWhileBody69);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf71,
        new Register(13, RegisterField.dw), new Register(21, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_3_tmpPRU_DIV_3_a => R13, tmpPRU_MULDIV_3_tmpPRU_DIV_3_b => R21"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw),
        new Register(20, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_3_tmpPRU_DIV_3_div => R19, tmpPRU_MULDIV_3_tmpPRU_DIV_3_mask => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(13, RegisterField.dw), new Register(13, RegisterField.dw),
        new Register(21, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_3_tmpPRU_DIV_3_a => R13, tmpPRU_MULDIV_3_tmpPRU_DIV_3_b => R21"));

    ce.visitLabel(endIf71);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_3_tmpPRU_DIV_3_mask => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_3_tmpPRU_DIV_3_b => R21"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody69,
            new Register(20, RegisterField.dw), 0).setComment(
            "tmpPRU_MULDIV_3_tmpPRU_DIV_3_mask => R20"));
    ce.visitLabel(endWhile70);

    // End PRU_DIV
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile73,
        new Register(15, RegisterField.dw), 0).setComment("tmpPRU_MULDIV_3_a => R15"));
    ce.visitLabel(startWhileBody72);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.BC, endIf74,
        new Register(15, RegisterField.dw), 0).setComment("tmpPRU_MULDIV_3_a => R15"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_3_div => R17, tmpPRU_MULDIV_3_qn => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(13, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_3_mod => R18, tmpPRU_MULDIV_3_rn => R13"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf75,
        new Register(18, RegisterField.dw), new Register(16, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_3_mod => R18, tmpPRU_MULDIV_3_z => R16"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_3_div => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(16, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_3_mod => R18, tmpPRU_MULDIV_3_z => R16"));

    ce.visitLabel(endIf75);


    ce.visitLabel(endIf74);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(15, RegisterField.dw), new Register(15, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_3_a => R15"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_3_qn => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(13, RegisterField.dw), new Register(13, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_3_rn => R13"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf76,
        new Register(13, RegisterField.dw), new Register(16, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_3_rn => R13, tmpPRU_MULDIV_3_z => R16"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_3_qn => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(13, RegisterField.dw), new Register(13, RegisterField.dw),
        new Register(16, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_3_rn => R13, tmpPRU_MULDIV_3_z => R16"));

    ce.visitLabel(endIf76);


    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody72,
            new Register(15, RegisterField.dw), 0).setComment("tmpPRU_MULDIV_3_a => R15"));
    ce.visitLabel(endWhile73);

    //
    // End PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(3, RegisterField.dw), new Register(17, RegisterField.dw), 0).setComment(
        "decel_val => R3, tmpPRU_MULDIV_3_div => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(3, RegisterField.dw), new Register(3, RegisterField.dw), 1).setComment(
        "decel_val => R3"));

    ce.visitInstruction(new QuickBranchInstruction(endIf65).setComment(""));
    ce.visitLabel(if66);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(3, RegisterField.dw), new Register(9, RegisterField.dw),
        new Register(14, RegisterField.dw)).setComment(
        "decel_val => R3, quantity => R9, accel_lim => R14"));

    ce.visitLabel(endIf65);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(7, RegisterField.dw), new Register(9, RegisterField.dw),
        new Register(3, RegisterField.dw)).setComment(
        "v_decel_start => R7, quantity => R9, decel_val => R3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(7, RegisterField.dw), new Register(7, RegisterField.dw), 1).setComment(
        "v_decel_start => R7"));

    ce.visitLabel(endIf42);

    //
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GE, if78,
        new Register(6, RegisterField.dw), new Register(4, RegisterField.dw)).setComment(
        "step_delay => R6, min_delay => R4"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 1).setComment(
        "state => R8.b0"));

    ce.visitInstruction(new QuickBranchInstruction(endIf77).setComment(""));
    ce.visitLabel(if78);
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 2).setComment(
        "state => R8.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(6, RegisterField.dw), new Register(4, RegisterField.dw), 0).setComment(
        "step_delay => R6, min_delay => R4"));

    ce.visitLabel(endIf77);

    //

    ce.visitInstruction(new QuickBranchInstruction(endIf27).setComment(""));
    ce.visitLabel(if28);
    ce.visitInstruction(new LdiInstruction(new Register(6, RegisterField.dw), (short) 0).setComment(
        "step_delay => R6"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 4).setComment(
        "state => R8.b0"));

    ce.visitInstruction(new QuickBranchInstruction(endIf27).setComment(""));
    ce.visitLabel(elsIf79);
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 2).setComment(
        "state => R8.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(6, RegisterField.dw), new Register(4, RegisterField.dw), 0).setComment(
        "step_delay => R6, min_delay => R4"));
    ce.visitInstruction(new LdiInstruction(new Register(5, RegisterField.dw), (short) 1).setComment(
        "step_count => R5"));

    ce.visitInstruction(new QuickBranchInstruction(endIf27).setComment(""));
    ce.visitLabel(elsIf80);
    // TODO: добавить вычисление v_decel_start
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 2).setComment(
        "state => R8.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(6, RegisterField.dw), new Register(4, RegisterField.dw), 0).setComment(
        "step_delay => R6, min_delay => R4"));
    ce.visitInstruction(new LdiInstruction(new Register(5, RegisterField.dw), (short) 1).setComment(
        "step_count => R5"));

    ce.visitLabel(endIf27);

    ce.visitLabel(endIf26);


    ce.visitInstruction(new QuickBranchInstruction(endIf18).setComment(""));
    ce.visitLabel(elsIf85);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(5, RegisterField.dw), new Register(5, RegisterField.dw), 1).setComment(
        "step_count => R5"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.LE, if83,
        new Register(5, RegisterField.dw), new Register(9, RegisterField.dw)).setComment(
        "step_count => R5, quantity => R9"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.LT, elsIf84,
        new Register(5, RegisterField.dw), new Register(7, RegisterField.dw)).setComment(
        "step_count => R5, v_decel_start => R7"));
    ce.visitInstruction(new QuickBranchInstruction(endIf82).setComment(""));
    ce.visitLabel(if83);
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 4).setComment(
        "state => R8.b0"));

    ce.visitInstruction(new QuickBranchInstruction(endIf82).setComment(""));
    ce.visitLabel(elsIf84);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(2, RegisterField.dw), new Register(3, RegisterField.dw), 0).setComment(
        "accel_count => R2, decel_val => R3"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 3).setComment(
        "state => R8.b0"));
    ce.visitInstruction(new LdiInstruction(new Register(1, RegisterField.dw), (short) 0).setComment(
        "accelCalc_rest => R1"));

    ce.visitLabel(endIf82);


    ce.visitInstruction(new QuickBranchInstruction(endIf18).setComment(""));
    ce.visitLabel(elsIf103);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(5, RegisterField.dw), new Register(5, RegisterField.dw), 1).setComment(
        "step_count => R5"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if87,
        new Register(8, RegisterField.b0), 1).setComment("state => R8.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(2, RegisterField.dw), new Register(2, RegisterField.dw), 1).setComment(
        "accel_count => R2"));

    ce.visitInstruction(new QuickBranchInstruction(endIf86).setComment(""));
    ce.visitLabel(if87);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(2, RegisterField.dw), new Register(2, RegisterField.dw), 1).setComment(
        "accel_count => R2"));

    ce.visitLabel(endIf86);

    // Call PRU_STEPPER_ACCEL_CALC
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.dw), new Register(2, RegisterField.dw), 0).setComment(
        "accelCalc_accel_count => R13, accel_count => R2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.dw), new Register(6, RegisterField.dw), 0).setComment(
        "accelCalc_step_delay => R14, step_delay => R6"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b2), (short) 0).setComment(
        "accelCalc_accel => R8.b2"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, ne88,
        new Register(8, RegisterField.b0), 1).setComment("state => R8.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.XOR,
        new Register(8, RegisterField.b2), new Register(8, RegisterField.b2), 1).setComment(
        "accelCalc_accel => R8.b2"));
    ce.visitLabel(ne88);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(15, RegisterField.dw), new Register(14, RegisterField.dw), 1).setComment(
        "accelCalc_step_delay2x => R15, accelCalc_step_delay => R14"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(15, RegisterField.dw), new Register(15, RegisterField.dw),
        new Register(1, RegisterField.dw)).setComment(
        "accelCalc_step_delay2x => R15, accelCalc_rest => R1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(13, RegisterField.dw), new Register(13, RegisterField.dw), 2).setComment(
        "accelCalc_accel_count4x => R13, accelCalc_accel_count => R13"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if90,
        new Register(8, RegisterField.b2), 0).setComment("accelCalc_accel => R8.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(13, RegisterField.dw), new Register(13, RegisterField.dw), 1).setComment(
        "accelCalc_accel_count4x => R13"));

    ce.visitInstruction(new QuickBranchInstruction(endIf89).setComment(""));
    ce.visitLabel(if90);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.dw), new Register(13, RegisterField.dw), 1).setComment(
        "accelCalc_accel_count4x => R13"));

    ce.visitLabel(endIf89);

    // Call PRU_DIV
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(8, RegisterField.b3),
        new Register(15, RegisterField.dw), (byte) 1).setComment(
        "accelCalc_tmpPRU_DIV_2_bitX => R8.b3, accelCalc_tmpPRU_DIV_2_x => R15"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(16, RegisterField.b0),
        new Register(13, RegisterField.dw), (byte) 1).setComment(
        "accelCalc_tmpPRU_DIV_2_bitY => R16.b0, accelCalc_tmpPRU_DIV_2_y => R13"));

    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.dw), (short) 1).setComment(
            "accelCalc_tmpPRU_DIV_2_mask => R17"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if92,
        new Register(16, RegisterField.b0), new Register(8, RegisterField.b3)).setComment(
        "accelCalc_tmpPRU_DIV_2_bitY => R16.b0, accelCalc_tmpPRU_DIV_2_bitX => R8.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(13, RegisterField.dw), 0).setComment(
        "accelCalc_tmpPRU_DIV_2_b => R18, accelCalc_tmpPRU_DIV_2_y => R13"));

    ce.visitInstruction(new QuickBranchInstruction(endIf91).setComment(""));
    ce.visitLabel(if92);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(8, RegisterField.b3), new Register(8, RegisterField.b3),
        new Register(16, RegisterField.b0)).setComment(
        "accelCalc_tmpPRU_DIV_2_diff => R8.b3, accelCalc_tmpPRU_DIV_2_bitX => R8.b3, accelCalc_tmpPRU_DIV_2_bitY => R16.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(18, RegisterField.dw), new Register(13, RegisterField.dw),
        new Register(8, RegisterField.b3)).setComment(
        "accelCalc_tmpPRU_DIV_2_b => R18, accelCalc_tmpPRU_DIV_2_y => R13, accelCalc_tmpPRU_DIV_2_diff => R8.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(8, RegisterField.b3)).setComment(
        "accelCalc_tmpPRU_DIV_2_mask => R17, accelCalc_tmpPRU_DIV_2_diff => R8.b3"));

    ce.visitLabel(endIf91);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.dw), new Register(15, RegisterField.dw), 0).setComment(
        "accelCalc_tmpPRU_DIV_2_a => R13, accelCalc_tmpPRU_DIV_2_x => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 0).setComment(
            "accelCalc_tmpPRU_DIV_2_div => R15"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile94,
        new Register(17, RegisterField.dw), 0).setComment("accelCalc_tmpPRU_DIV_2_mask => R17"));
    ce.visitLabel(startWhileBody93);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf95,
        new Register(13, RegisterField.dw), new Register(18, RegisterField.dw)).setComment(
        "accelCalc_tmpPRU_DIV_2_a => R13, accelCalc_tmpPRU_DIV_2_b => R18"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(15, RegisterField.dw), new Register(15, RegisterField.dw),
        new Register(17, RegisterField.dw)).setComment(
        "accelCalc_tmpPRU_DIV_2_div => R15, accelCalc_tmpPRU_DIV_2_mask => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(13, RegisterField.dw), new Register(13, RegisterField.dw),
        new Register(18, RegisterField.dw)).setComment(
        "accelCalc_tmpPRU_DIV_2_a => R13, accelCalc_tmpPRU_DIV_2_b => R18"));

    ce.visitLabel(endIf95);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw), 1).setComment(
        "accelCalc_tmpPRU_DIV_2_mask => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw), 1).setComment(
        "accelCalc_tmpPRU_DIV_2_b => R18"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody93,
            new Register(17, RegisterField.dw), 0).setComment(
            "accelCalc_tmpPRU_DIV_2_mask => R17"));
    ce.visitLabel(endWhile94);

    // End PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(1, RegisterField.dw), new Register(13, RegisterField.dw), 0).setComment(
        "accelCalc_rest => R1, accelCalc_tmpPRU_DIV_2_mod => R13"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.dw), new Register(15, RegisterField.dw), 0).setComment(
        "accelCalc_next_delay => R13, accelCalc_tmpPRU_DIV_2_div => R15"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if97,
        new Register(8, RegisterField.b2), 0).setComment("accelCalc_accel => R8.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.dw), new Register(14, RegisterField.dw),
        new Register(13, RegisterField.dw)).setComment(
        "accelCalc_next_delay => R13, accelCalc_step_delay => R14"));

    ce.visitInstruction(new QuickBranchInstruction(endIf96).setComment(""));
    ce.visitLabel(if97);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(13, RegisterField.dw), new Register(14, RegisterField.dw),
        new Register(13, RegisterField.dw)).setComment(
        "accelCalc_next_delay => R13, accelCalc_step_delay => R14"));

    ce.visitLabel(endIf96);

    // End PRU_STEPPER_ACCEL_CALC
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if99,
        new Register(8, RegisterField.b0), 3).setComment("state => R8.b0"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.LT, endIf100,
        new Register(13, RegisterField.dw), new Register(4, RegisterField.dw)).setComment(
        "new_step_delay => R13, min_delay => R4"));
    // Если достигли максимальную скорость, то начинаем равномерное движение
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(13, RegisterField.dw), new Register(4, RegisterField.dw), 0).setComment(
        "new_step_delay => R13, min_delay => R4"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 2).setComment(
        "state => R8.b0"));

    ce.visitLabel(endIf100);

    //
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GE, endIf101,
        new Register(5, RegisterField.dw), new Register(7, RegisterField.dw)).setComment(
        "step_count => R5, v_decel_start => R7"));
    // Если пора замедляться, то начинаем замедление
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(2, RegisterField.dw), new Register(3, RegisterField.dw), 0).setComment(
        "accel_count => R2, decel_val => R3"));
    ce.visitInstruction(new LdiInstruction(new Register(1, RegisterField.dw), (short) 0).setComment(
        "accelCalc_rest => R1"));
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 3).setComment(
        "state => R8.b0"));

    ce.visitLabel(endIf101);


    ce.visitInstruction(new QuickBranchInstruction(endIf98).setComment(""));
    ce.visitLabel(if99);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, endIf102,
        new Register(2, RegisterField.dw), 1).setComment("accel_count => R2"));
    // Если все импульсы сделаны, то останавливаемся
    ce.visitInstruction(new LdiInstruction(new Register(8, RegisterField.b0), (short) 4).setComment(
        "state => R8.b0"));

    ce.visitLabel(endIf102);


    ce.visitLabel(endIf98);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(6, RegisterField.dw), new Register(13, RegisterField.dw), 0).setComment(
        "step_delay => R6, new_step_delay => R13"));

    ce.visitLabel(endIf18);


  }
}
