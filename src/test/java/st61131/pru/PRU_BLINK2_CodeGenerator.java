package st61131.pru;

/*Generated by MPS */

import com.github.vlsi.pru.plc110.ArithmeticInstruction;
import com.github.vlsi.pru.plc110.CodeEmitter;
import com.github.vlsi.pru.plc110.Label;
import com.github.vlsi.pru.plc110.LdiInstruction;
import com.github.vlsi.pru.plc110.QuickBranchInstruction;
import com.github.vlsi.pru.plc110.Register;
import com.github.vlsi.pru.plc110.RegisterField;

import java.util.function.Consumer;

public class PRU_BLINK2_CodeGenerator implements Consumer<CodeEmitter> {
  @Override
  public void accept(CodeEmitter ce) {
    Label startWhileBody0 = new Label("startWhileBody0");
    Label startRepeat2 = new Label("startRepeat2");
    Label if4 = new Label("if4");
    Label endIf3 = new Label("endIf3");
    Label endWhile1 = new Label("endWhile1");
    ce.visitLabel(startWhileBody0);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.XOR,
        new Register(1, RegisterField.b0), new Register(1, RegisterField.b0), 1).setComment(
        "out => R1.b0"));
    ce.visitInstruction(
        new LdiInstruction(new Register(1, RegisterField.w1), (short) 30000).setComment(
            "len => R1.w1"));
    ce.visitLabel(startRepeat2);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(1, RegisterField.w1), new Register(1, RegisterField.w1), 2).setComment(
        "len => R1.w1"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startRepeat2,
            new Register(1, RegisterField.w1), 0).setComment("len => R1.w1"));

    // Call PRU_OUT1
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(1, RegisterField.b1), new Register(1, RegisterField.b0), 0).setComment(
        "tmpPRU_OUT1_4_Q => R1.b1, out => R1.b0"));
    // Ага, ассемблерные вставки
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if4,
        new Register(1, RegisterField.b1), 0).setComment("tmpPRU_OUT1_4_Q => R1.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.CLR,
        new Register(30, RegisterField.dw), new Register(30, RegisterField.dw), 28).setComment(""));

    ce.visitInstruction(new QuickBranchInstruction(endIf3).setComment(""));
    ce.visitLabel(if4);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SET,
        new Register(30, RegisterField.dw), new Register(30, RegisterField.dw), 28).setComment(""));

    ce.visitLabel(endIf3);

    // End PRU_OUT1

    ce.visitInstruction(new QuickBranchInstruction(startWhileBody0).setComment(""));
    ce.visitLabel(endWhile1);


  }
}
