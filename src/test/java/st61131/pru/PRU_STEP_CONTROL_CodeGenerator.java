package st61131.pru;

/*Generated by MPS */

import com.github.vlsi.pru.plc110.ArithmeticInstruction;
import com.github.vlsi.pru.plc110.CodeEmitter;
import com.github.vlsi.pru.plc110.Format2Instruction;
import com.github.vlsi.pru.plc110.JumpInstruction;
import com.github.vlsi.pru.plc110.Label;
import com.github.vlsi.pru.plc110.LdiInstruction;
import com.github.vlsi.pru.plc110.LeftMostBitDetectInstruction;
import com.github.vlsi.pru.plc110.MemoryTransferInstruction;
import com.github.vlsi.pru.plc110.QuickBranchInstruction;
import com.github.vlsi.pru.plc110.Register;
import com.github.vlsi.pru.plc110.RegisterField;

import java.util.function.Consumer;

public class PRU_STEP_CONTROL_CodeGenerator implements Consumer<CodeEmitter> {
  @Override
  public void accept(CodeEmitter ce) {
    Label startWhileBody0 = new Label("startWhileBody0");
    Label if5 = new Label("if5");
    Label endIf6 = new Label("endIf6");
    Label elsIf80 = new Label("elsIf80");
    Label if9 = new Label("if9");
    Label endIf8 = new Label("endIf8");
    Label startWhileBody10 = new Label("startWhileBody10");
    Label endIf12 = new Label("endIf12");
    Label endWhile11 = new Label("endWhile11");
    Label startWhileBody17 = new Label("startWhileBody17");
    Label endIf19 = new Label("endIf19");
    Label endWhile18 = new Label("endWhile18");
    Label if16 = new Label("if16");
    Label if21 = new Label("if21");
    Label endIf20 = new Label("endIf20");
    Label startWhileBody22 = new Label("startWhileBody22");
    Label endIf24 = new Label("endIf24");
    Label endWhile23 = new Label("endWhile23");
    Label endIf15 = new Label("endIf15");
    Label startWhileBody25 = new Label("startWhileBody25");
    Label endWhile26 = new Label("endWhile26");
    Label startRepeat27 = new Label("startRepeat27");
    Label endIf28 = new Label("endIf28");
    Label endIf29 = new Label("endIf29");
    Label if33 = new Label("if33");
    Label endIf32 = new Label("endIf32");
    Label startWhileBody34 = new Label("startWhileBody34");
    Label endIf36 = new Label("endIf36");
    Label endWhile35 = new Label("endWhile35");
    Label if38 = new Label("if38");
    Label endIf37 = new Label("endIf37");
    Label startWhileBody39 = new Label("startWhileBody39");
    Label endIf41 = new Label("endIf41");
    Label endWhile40 = new Label("endWhile40");
    Label startWhileBody42 = new Label("startWhileBody42");
    Label endIf45 = new Label("endIf45");
    Label endIf44 = new Label("endIf44");
    Label endIf46 = new Label("endIf46");
    Label endWhile43 = new Label("endWhile43");
    Label if31 = new Label("if31");
    Label startWhileBody47 = new Label("startWhileBody47");
    Label endIf49 = new Label("endIf49");
    Label endWhile48 = new Label("endWhile48");
    Label endIf30 = new Label("endIf30");
    Label if52 = new Label("if52");
    Label endIf51 = new Label("endIf51");
    Label startWhileBody53 = new Label("startWhileBody53");
    Label endIf55 = new Label("endIf55");
    Label endWhile54 = new Label("endWhile54");
    Label startWhileBody56 = new Label("startWhileBody56");
    Label endIf59 = new Label("endIf59");
    Label endIf58 = new Label("endIf58");
    Label endIf60 = new Label("endIf60");
    Label endWhile57 = new Label("endWhile57");
    Label if64 = new Label("if64");
    Label endIf63 = new Label("endIf63");
    Label startWhileBody65 = new Label("startWhileBody65");
    Label endIf67 = new Label("endIf67");
    Label endWhile66 = new Label("endWhile66");
    Label startWhileBody68 = new Label("startWhileBody68");
    Label endIf71 = new Label("endIf71");
    Label endIf70 = new Label("endIf70");
    Label endIf72 = new Label("endIf72");
    Label endWhile69 = new Label("endWhile69");
    Label if62 = new Label("if62");
    Label endIf61 = new Label("endIf61");
    Label endIf75 = new Label("endIf75");
    Label if74 = new Label("if74");
    Label endIf73 = new Label("endIf73");
    Label endIf50 = new Label("endIf50");
    Label if77 = new Label("if77");
    Label endIf76 = new Label("endIf76");
    Label if14 = new Label("if14");
    Label elsIf78 = new Label("elsIf78");
    Label elsIf79 = new Label("elsIf79");
    Label endIf13 = new Label("endIf13");
    Label endIf7 = new Label("endIf7");
    Label elsIf81 = new Label("elsIf81");
    Label elsIf103 = new Label("elsIf103");
    Label endIf84 = new Label("endIf84");
    Label if83 = new Label("if83");
    Label endIf82 = new Label("endIf82");
    Label ne85 = new Label("ne85");
    Label if87 = new Label("if87");
    Label endIf86 = new Label("endIf86");
    Label if89 = new Label("if89");
    Label endIf88 = new Label("endIf88");
    Label startWhileBody90 = new Label("startWhileBody90");
    Label endIf92 = new Label("endIf92");
    Label endWhile91 = new Label("endWhile91");
    Label if94 = new Label("if94");
    Label endIf93 = new Label("endIf93");
    Label endIf97 = new Label("endIf97");
    Label if96 = new Label("if96");
    Label orMatch99 = new Label("orMatch99");
    Label if101 = new Label("if101");
    Label endIf100 = new Label("endIf100");
    Label endIf98 = new Label("endIf98");
    Label endIf102 = new Label("endIf102");
    Label endIf95 = new Label("endIf95");
    Label endIf4 = new Label("endIf4");
    Label if106 = new Label("if106");
    Label if108 = new Label("if108");
    Label endIf107 = new Label("endIf107");
    Label elsIf111 = new Label("elsIf111");
    Label if110 = new Label("if110");
    Label endIf109 = new Label("endIf109");
    Label endIf105 = new Label("endIf105");
    Label endIf104 = new Label("endIf104");
    Label orMatch133 = new Label("orMatch133");
    Label if113 = new Label("if113");
    Label elsIf132 = new Label("elsIf132");
    Label if115 = new Label("if115");
    Label if117 = new Label("if117");
    Label endIf116 = new Label("endIf116");
    Label startWhileBody118 = new Label("startWhileBody118");
    Label endIf120 = new Label("endIf120");
    Label endWhile119 = new Label("endWhile119");
    Label endIf114 = new Label("endIf114");
    Label if123 = new Label("if123");
    Label endIf122 = new Label("endIf122");
    Label startWhileBody124 = new Label("startWhileBody124");
    Label endIf126 = new Label("endIf126");
    Label endWhile125 = new Label("endWhile125");
    Label startWhileBody127 = new Label("startWhileBody127");
    Label endIf130 = new Label("endIf130");
    Label endIf129 = new Label("endIf129");
    Label endIf131 = new Label("endIf131");
    Label endWhile128 = new Label("endWhile128");
    Label endIf121 = new Label("endIf121");
    Label endIf112 = new Label("endIf112");
    Label if135 = new Label("if135");
    Label if138 = new Label("if138");
    Label endIf137 = new Label("endIf137");
    Label startWhileBody139 = new Label("startWhileBody139");
    Label endIf141 = new Label("endIf141");
    Label endWhile140 = new Label("endWhile140");
    Label startWhileBody142 = new Label("startWhileBody142");
    Label endIf145 = new Label("endIf145");
    Label endIf144 = new Label("endIf144");
    Label endIf146 = new Label("endIf146");
    Label endWhile143 = new Label("endWhile143");
    Label endIf136 = new Label("endIf136");
    Label endIf134 = new Label("endIf134");
    Label if3 = new Label("if3");
    Label endIf2 = new Label("endIf2");
    Label startRepeat147 = new Label("startRepeat147");
    Label endIf148 = new Label("endIf148");
    Label if150 = new Label("if150");
    Label endIf151 = new Label("endIf151");
    Label startWhileBody152 = new Label("startWhileBody152");
    Label endWhile153 = new Label("endWhile153");
    Label endIf149 = new Label("endIf149");
    Label if156 = new Label("if156");
    Label endIf155 = new Label("endIf155");
    Label endIf154 = new Label("endIf154");
    Label endWhile1 = new Label("endWhile1");
    // безопасные значения
    ce.visitInstruction(
        new LdiInstruction(new Register(14, RegisterField.b0), (short) 0).setComment(
            "stepper_enable => R14.b0"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 26995).setComment(
            "cycleLength => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 28276).setComment(
            "cycleLength => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 27497).setComment(
            "cycleLength => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 30319).setComment(
            "cycleLength => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 30254).setComment(
            "cycleLength => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 24940).setComment(
            "cycleLength => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 26980).setComment(
            "cycleLength => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 26989).setComment(
            "cycleLength => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 16498).setComment(
            "cycleLength => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 28007).setComment(
            "cycleLength => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 26977).setComment(
            "cycleLength => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 11884).setComment(
            "cycleLength => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 28515).setComment(
            "cycleLength => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 15213).setComment(
            "cycleLength => R15"));

    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 100).setComment(
            "cycleLength => R15"));
    ce.visitInstruction(
        new LdiInstruction(new Register(16, RegisterField.dw), (short) 0).setComment(
            "stepper_quantity => R16"));
    ce.visitInstruction(
        new LdiInstruction(new Register(14, RegisterField.b1), (short) 0).setComment(
            "out => R14.b1"));
    ce.visitLabel(startWhileBody0);
    // собственно полезная работа
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(15, RegisterField.dw), new Register(11, RegisterField.dw),
        new Register(15, RegisterField.dw)).setComment(
        "cycleLength => R15, stepper_step_delay => R11"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if3,
        new Register(14, RegisterField.b1), 0).setComment("out => R14.b1"));
    // Call PRU_STEPPER
    //
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if5,
        new Register(13, RegisterField.b3), 4).setComment("stepper_state => R13.b3"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, elsIf80,
        new Register(13, RegisterField.b3), 0).setComment("stepper_state => R13.b3"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, elsIf81,
        new Register(13, RegisterField.b3), 2).setComment("stepper_state => R13.b3"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, elsIf103,
        new Register(13, RegisterField.b3), 1).setComment("stepper_state => R13.b3"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, elsIf103,
        new Register(13, RegisterField.b3), 3).setComment("stepper_state => R13.b3"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf4,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if5);
    // Ждём нового цикла
    ce.visitInstruction(
        new LdiInstruction(new Register(11, RegisterField.dw), (short) 0).setComment(
            "stepper_step_delay => R11"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, endIf6,
        new Register(14, RegisterField.b0), 0).setComment("stepper_enable => R14.b0"));
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.b3), (short) 0).setComment(
            "stepper_state => R13.b3"));
    ce.visitInstruction(
        new LdiInstruction(new Register(10, RegisterField.dw), (short) 0).setComment(
            "stepper_step_count => R10"));

    ce.visitLabel(endIf6);


    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf4,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(elsIf80);
    ce.visitInstruction(
        new LdiInstruction(new Register(10, RegisterField.dw), (short) 0).setComment(
            "stepper_step_count => R10"));
    ce.visitInstruction(new LdiInstruction(new Register(3, RegisterField.dw), (short) 0).setComment(
        "stepper_accel_count => R3"));
    ce.visitInstruction(new LdiInstruction(new Register(2, RegisterField.dw), (short) 0).setComment(
        "stepper_accelCalc_rest => R2"));
    ce.visitInstruction(
        new LdiInstruction(new Register(12, RegisterField.w0), (short) 65535).setComment(
            "stepper_v_decel_start => R12"));
    ce.visitInstruction(
        new LdiInstruction(new Register(12, RegisterField.w2), (short) 65535).setComment(""));
    ce.visitInstruction(
        new LdiInstruction(new Register(11, RegisterField.dw), (short) 0).setComment(
            "stepper_step_delay => R11"));
    ce.visitInstruction(new LdiInstruction(new Register(6, RegisterField.dw), (short) 0).setComment(
        "stepper_last_accel_delay => R6"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endIf7,
        new Register(14, RegisterField.b0), 0).setComment("stepper_enable => R14.b0"));
    // Call PRU_DIV
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.w0), (short) 49664).setComment(
            "stepper_tmpPRU_DIV_0_x => R17"));
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.w2), (short) 3051).setComment(""));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(7, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_DIV_0_y => R18, stepper_max_speed => R7"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b2),
        new Register(17, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_DIV_0_bitX => R14.b2, stepper_tmpPRU_DIV_0_x => R17"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b3),
        new Register(18, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_DIV_0_bitY => R14.b3, stepper_tmpPRU_DIV_0_y => R18"));

    ce.visitInstruction(
        new LdiInstruction(new Register(19, RegisterField.dw), (short) 1).setComment(
            "stepper_tmpPRU_DIV_0_mask => R19"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if9,
        new Register(14, RegisterField.b3), new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_DIV_0_bitY => R14.b3, stepper_tmpPRU_DIV_0_bitX => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(18, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_DIV_0_b => R20, stepper_tmpPRU_DIV_0_y => R18"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf8,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if9);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(14, RegisterField.b2), new Register(14, RegisterField.b2),
        new Register(14, RegisterField.b3)).setComment(
        "stepper_tmpPRU_DIV_0_diff => R14.b2, stepper_tmpPRU_DIV_0_bitX => R14.b2, stepper_tmpPRU_DIV_0_bitY => R14.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(20, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_DIV_0_b => R20, stepper_tmpPRU_DIV_0_y => R18, stepper_tmpPRU_DIV_0_diff => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_DIV_0_mask => R19, stepper_tmpPRU_DIV_0_diff => R14.b2"));

    ce.visitLabel(endIf8);

    ce.visitInstruction(
        new LdiInstruction(new Register(18, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_DIV_0_div => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile11,
        new Register(19, RegisterField.dw), 0).setComment("stepper_tmpPRU_DIV_0_mask => R19"));
    ce.visitLabel(startWhileBody10);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf12,
        new Register(17, RegisterField.dw), new Register(20, RegisterField.dw)).setComment(
        "stepper_tmpPRU_DIV_0_a => R17, stepper_tmpPRU_DIV_0_b => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_DIV_0_div => R18, stepper_tmpPRU_DIV_0_mask => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(20, RegisterField.dw)).setComment(
        "stepper_tmpPRU_DIV_0_a => R17, stepper_tmpPRU_DIV_0_b => R20"));

    ce.visitLabel(endIf12);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_DIV_0_mask => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_DIV_0_b => R20"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody10,
            new Register(19, RegisterField.dw), 0).setComment("stepper_tmpPRU_DIV_0_mask => R19"));
    ce.visitLabel(endWhile11);

    // Variable stepper_tmpPRU_DIV_0_mod was never used, thus optimized out instruction ADD
    // End PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(8, RegisterField.dw), new Register(18, RegisterField.dw), 0).setComment(
        "stepper_min_delay => R8, stepper_tmpPRU_DIV_0_div => R18"));
    ce.visitInstruction(
        new LdiInstruction(new Register(10, RegisterField.dw), (short) 1).setComment(
            "stepper_step_count => R10"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if14,
        new Register(16, RegisterField.dw), 0).setComment("stepper_quantity => R16"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GE, elsIf78,
        new Register(16, RegisterField.dw), 2).setComment("stepper_quantity => R16"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, elsIf79,
        new Register(4, RegisterField.dw), 0).setComment("stepper_accel_ramp => R4"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if16,
        new Register(9, RegisterField.dw), 0).setComment("stepper_min_speed => R9"));
    // c0 <- freq*2/(min_speed+sqrt(min_speed**2+2*w))
    // Call PRU_MUL_DW_DW
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(9, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MUL_DW_DW_0_x => R17, stepper_min_speed => R9"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(9, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MUL_DW_DW_0_y => R18, stepper_min_speed => R9"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.MIN,
        new Register(19, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(18, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MUL_DW_DW_0_a => R19, stepper_tmpPRU_MUL_DW_DW_0_x => R17, stepper_tmpPRU_MUL_DW_DW_0_y => R18"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.MAX,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(18, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MUL_DW_DW_0_b => R17, stepper_tmpPRU_MUL_DW_DW_0_x => R17, stepper_tmpPRU_MUL_DW_DW_0_y => R18"));

    ce.visitInstruction(
        new LdiInstruction(new Register(18, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_MUL_DW_DW_0_mul => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile18,
        new Register(19, RegisterField.dw), 0).setComment("stepper_tmpPRU_MUL_DW_DW_0_a => R19"));
    ce.visitLabel(startWhileBody17);
    // LMBD?
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.BC, endIf19,
        new Register(19, RegisterField.dw), 0).setComment("stepper_tmpPRU_MUL_DW_DW_0_a => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(17, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MUL_DW_DW_0_mul => R18, stepper_tmpPRU_MUL_DW_DW_0_b => R17"));
    ce.visitLabel(endIf19);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MUL_DW_DW_0_a => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MUL_DW_DW_0_b => R17"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody17,
            new Register(19, RegisterField.dw), 0).setComment(
            "stepper_tmpPRU_MUL_DW_DW_0_a => R19"));
    ce.visitLabel(endWhile18);

    // End PRU_MUL_DW_DW
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(11, RegisterField.dw), new Register(18, RegisterField.dw), 0).setComment(
        "stepper_step_delay => R11, stepper_tmpPRU_MUL_DW_DW_0_mul => R18"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(11, RegisterField.dw), new Register(11, RegisterField.dw),
        new Register(4, RegisterField.dw)).setComment(
        "stepper_step_delay => R11, stepper_accel_ramp => R4"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(11, RegisterField.dw), new Register(11, RegisterField.dw),
        new Register(4, RegisterField.dw)).setComment(
        "stepper_step_delay => R11, stepper_accel_ramp => R4"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf15,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if16);
    // Вычисление accel_start
    // c0 <- sqrt(2/accel_ramp)*0.676*freq; freq=150e6
    // c0 <- sqrt(2/accel_ramp)*101.4e6; 101.4e6 = 24755.86*4096
    // c0 <- sqrt(1225705208.6792002/accel_ramp)*4096;
    // c0 <- sqrt(4294967294/accel_ramp)*2188.1295 == sqrt(4294967294*4787911/accel_ramp);
    // 2188 == freq*0.676/sqrt(4294967294/2)
    // Call PRU_DIV
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.w0), (short) 65534).setComment(
            "stepper_tmpPRU_DIV_1_x => R17"));
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.w2), (short) 65535).setComment(""));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(4, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_DIV_1_y => R18, stepper_accel_ramp => R4"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b2),
        new Register(17, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_DIV_1_bitX => R14.b2, stepper_tmpPRU_DIV_1_x => R17"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b3),
        new Register(18, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_DIV_1_bitY => R14.b3, stepper_tmpPRU_DIV_1_y => R18"));

    ce.visitInstruction(
        new LdiInstruction(new Register(19, RegisterField.dw), (short) 1).setComment(
            "stepper_tmpPRU_DIV_1_mask => R19"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if21,
        new Register(14, RegisterField.b3), new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_DIV_1_bitY => R14.b3, stepper_tmpPRU_DIV_1_bitX => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(18, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_DIV_1_b => R20, stepper_tmpPRU_DIV_1_y => R18"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf20,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if21);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(14, RegisterField.b2), new Register(14, RegisterField.b2),
        new Register(14, RegisterField.b3)).setComment(
        "stepper_tmpPRU_DIV_1_diff => R14.b2, stepper_tmpPRU_DIV_1_bitX => R14.b2, stepper_tmpPRU_DIV_1_bitY => R14.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(20, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_DIV_1_b => R20, stepper_tmpPRU_DIV_1_y => R18, stepper_tmpPRU_DIV_1_diff => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_DIV_1_mask => R19, stepper_tmpPRU_DIV_1_diff => R14.b2"));

    ce.visitLabel(endIf20);

    ce.visitInstruction(
        new LdiInstruction(new Register(18, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_DIV_1_div => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile23,
        new Register(19, RegisterField.dw), 0).setComment("stepper_tmpPRU_DIV_1_mask => R19"));
    ce.visitLabel(startWhileBody22);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf24,
        new Register(17, RegisterField.dw), new Register(20, RegisterField.dw)).setComment(
        "stepper_tmpPRU_DIV_1_a => R17, stepper_tmpPRU_DIV_1_b => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_DIV_1_div => R18, stepper_tmpPRU_DIV_1_mask => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(20, RegisterField.dw)).setComment(
        "stepper_tmpPRU_DIV_1_a => R17, stepper_tmpPRU_DIV_1_b => R20"));

    ce.visitLabel(endIf24);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_DIV_1_mask => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_DIV_1_b => R20"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody22,
            new Register(19, RegisterField.dw), 0).setComment("stepper_tmpPRU_DIV_1_mask => R19"));
    ce.visitLabel(endWhile23);

    // Variable stepper_tmpPRU_DIV_1_mod was never used, thus optimized out instruction ADD
    // End PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(11, RegisterField.dw), new Register(18, RegisterField.dw), 0).setComment(
        "stepper_step_delay => R11, stepper_tmpPRU_DIV_1_div => R18"));

    ce.visitLabel(endIf15);

    //
    // Call PRU_SQRT
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(11, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_SQRT_0_x => R17, stepper_step_delay => R11"));
    // https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#cite_ref-3
    // Fast integer square root by Mr. Woo's abacus algorithm (archived)
    ce.visitInstruction(
        new LdiInstruction(new Register(18, RegisterField.w0), (short) 0).setComment(
            "stepper_tmpPRU_SQRT_0_q2 => R18"));
    ce.visitInstruction(
        new LdiInstruction(new Register(18, RegisterField.w2), (short) 16384).setComment(""));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(19, RegisterField.dw), new Register(17, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_SQRT_0_v_x => R19, stepper_tmpPRU_SQRT_0_x => R17"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GE, endWhile26,
        new Register(18, RegisterField.dw), new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_SQRT_0_q2 => R18, stepper_tmpPRU_SQRT_0_v_x => R19"));
    ce.visitLabel(startWhileBody25);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw), 2).setComment(
        "stepper_tmpPRU_SQRT_0_q2 => R18"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.LT, startWhileBody25,
            new Register(18, RegisterField.dw), new Register(19, RegisterField.dw)).setComment(
            "stepper_tmpPRU_SQRT_0_q2 => R18, stepper_tmpPRU_SQRT_0_v_x => R19"));
    ce.visitLabel(endWhile26);

    ce.visitInstruction(
        new LdiInstruction(new Register(20, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_SQRT_0_sqrt => R20"));
    ce.visitLabel(startRepeat27);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(21, RegisterField.dw), new Register(20, RegisterField.dw),
        new Register(18, RegisterField.dw)).setComment(
        "stepper_tmpPRU_SQRT_0_sum => R21, stepper_tmpPRU_SQRT_0_sqrt => R20, stepper_tmpPRU_SQRT_0_q2 => R18"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_SQRT_0_sqrt => R20"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf28,
        new Register(19, RegisterField.dw), new Register(21, RegisterField.dw)).setComment(
        "stepper_tmpPRU_SQRT_0_v_x => R19, stepper_tmpPRU_SQRT_0_sum => R21"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw),
        new Register(21, RegisterField.dw)).setComment(
        "stepper_tmpPRU_SQRT_0_v_x => R19, stepper_tmpPRU_SQRT_0_sum => R21"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw),
        new Register(18, RegisterField.dw)).setComment(
        "stepper_tmpPRU_SQRT_0_sqrt => R20, stepper_tmpPRU_SQRT_0_q2 => R18"));

    ce.visitLabel(endIf28);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw), 2).setComment(
        "stepper_tmpPRU_SQRT_0_q2 => R18"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startRepeat27,
            new Register(18, RegisterField.dw), 0).setComment("stepper_tmpPRU_SQRT_0_q2 => R18"));

    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.LE, endIf29,
        new Register(20, RegisterField.dw), new Register(17, RegisterField.dw)).setComment(
        "stepper_tmpPRU_SQRT_0_sqrt => R20, stepper_tmpPRU_SQRT_0_x => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_SQRT_0_sqrt => R20"));
    ce.visitLabel(endIf29);

    // End PRU_SQRT
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(11, RegisterField.dw), new Register(20, RegisterField.dw), 0).setComment(
        "stepper_step_delay => R11, stepper_tmpPRU_SQRT_0_sqrt => R20"));
    //
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if31,
        new Register(9, RegisterField.dw), 0).setComment("stepper_min_speed => R9"));
    // c0 <- freq*2/(min_speed+sqrt(min_speed**2+2*w))
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(11, RegisterField.dw), new Register(11, RegisterField.dw),
        new Register(9, RegisterField.dw)).setComment(
        "stepper_step_delay => R11, stepper_min_speed => R9"));
    // Call PRU_DIV
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.w0), (short) 33792).setComment(
            "stepper_tmpPRU_DIV_2_x => R17"));
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.w2), (short) 6103).setComment(""));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(11, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_DIV_2_y => R18, stepper_step_delay => R11"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b2),
        new Register(17, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_DIV_2_bitX => R14.b2, stepper_tmpPRU_DIV_2_x => R17"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b3),
        new Register(18, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_DIV_2_bitY => R14.b3, stepper_tmpPRU_DIV_2_y => R18"));

    ce.visitInstruction(
        new LdiInstruction(new Register(19, RegisterField.dw), (short) 1).setComment(
            "stepper_tmpPRU_DIV_2_mask => R19"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if33,
        new Register(14, RegisterField.b3), new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_DIV_2_bitY => R14.b3, stepper_tmpPRU_DIV_2_bitX => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(18, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_DIV_2_b => R20, stepper_tmpPRU_DIV_2_y => R18"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf32,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if33);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(14, RegisterField.b2), new Register(14, RegisterField.b2),
        new Register(14, RegisterField.b3)).setComment(
        "stepper_tmpPRU_DIV_2_diff => R14.b2, stepper_tmpPRU_DIV_2_bitX => R14.b2, stepper_tmpPRU_DIV_2_bitY => R14.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(20, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_DIV_2_b => R20, stepper_tmpPRU_DIV_2_y => R18, stepper_tmpPRU_DIV_2_diff => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_DIV_2_mask => R19, stepper_tmpPRU_DIV_2_diff => R14.b2"));

    ce.visitLabel(endIf32);

    ce.visitInstruction(
        new LdiInstruction(new Register(18, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_DIV_2_div => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile35,
        new Register(19, RegisterField.dw), 0).setComment("stepper_tmpPRU_DIV_2_mask => R19"));
    ce.visitLabel(startWhileBody34);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf36,
        new Register(17, RegisterField.dw), new Register(20, RegisterField.dw)).setComment(
        "stepper_tmpPRU_DIV_2_a => R17, stepper_tmpPRU_DIV_2_b => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_DIV_2_div => R18, stepper_tmpPRU_DIV_2_mask => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(20, RegisterField.dw)).setComment(
        "stepper_tmpPRU_DIV_2_a => R17, stepper_tmpPRU_DIV_2_b => R20"));

    ce.visitLabel(endIf36);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_DIV_2_mask => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_DIV_2_b => R20"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody34,
            new Register(19, RegisterField.dw), 0).setComment("stepper_tmpPRU_DIV_2_mask => R19"));
    ce.visitLabel(endWhile35);

    // Variable stepper_tmpPRU_DIV_2_mod was never used, thus optimized out instruction ADD
    // End PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(11, RegisterField.dw), new Register(18, RegisterField.dw), 0).setComment(
        "stepper_step_delay => R11, stepper_tmpPRU_DIV_2_div => R18"));
    // Call PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(9, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_0_x => R17, stepper_min_speed => R9"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(9, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_0_y => R18, stepper_min_speed => R9"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(19, RegisterField.dw), new Register(4, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_0_z => R19, stepper_accel_ramp => R4"));
    // http://stackoverflow.com/a/4144956/1261287
    ce.visitInstruction(
        new LdiInstruction(new Register(20, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_MULDIV_0_div => R20"));
    ce.visitInstruction(
        new LdiInstruction(new Register(21, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_MULDIV_0_mod => R21"));
    // Call PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(22, RegisterField.dw), new Register(19, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_y => R22, stepper_tmpPRU_MULDIV_0_z => R19"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b2),
        new Register(18, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_bitX => R14.b2, stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_x => R18"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b3),
        new Register(22, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_bitY => R14.b3, stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_y => R22"));

    ce.visitInstruction(
        new LdiInstruction(new Register(23, RegisterField.dw), (short) 1).setComment(
            "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_mask => R23"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if38,
        new Register(14, RegisterField.b3), new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_bitY => R14.b3, stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_bitX => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(24, RegisterField.dw), new Register(22, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_b => R24, stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_y => R22"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf37,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if38);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(14, RegisterField.b2), new Register(14, RegisterField.b2),
        new Register(14, RegisterField.b3)).setComment(
        "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_diff => R14.b2, stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_bitX => R14.b2, stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_bitY => R14.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(24, RegisterField.dw), new Register(22, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_b => R24, stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_y => R22, stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_diff => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(23, RegisterField.dw), new Register(23, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_mask => R23, stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_diff => R14.b2"));

    ce.visitLabel(endIf37);

    ce.visitInstruction(
        new LdiInstruction(new Register(22, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_div => R22"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile40,
        new Register(23, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_mask => R23"));
    ce.visitLabel(startWhileBody39);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf41,
        new Register(18, RegisterField.dw), new Register(24, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_a => R18, stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_b => R24"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(22, RegisterField.dw), new Register(22, RegisterField.dw),
        new Register(23, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_div => R22, stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_mask => R23"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(24, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_a => R18, stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_b => R24"));

    ce.visitLabel(endIf41);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(23, RegisterField.dw), new Register(23, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_mask => R23"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(24, RegisterField.dw), new Register(24, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_b => R24"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody39,
            new Register(23, RegisterField.dw), 0).setComment(
            "stepper_tmpPRU_MULDIV_0_tmpPRU_DIV_5_mask => R23"));
    ce.visitLabel(endWhile40);

    // End PRU_DIV
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile43,
        new Register(17, RegisterField.dw), 0).setComment("stepper_tmpPRU_MULDIV_0_a => R17"));
    ce.visitLabel(startWhileBody42);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.BC, endIf44,
        new Register(17, RegisterField.dw), 0).setComment("stepper_tmpPRU_MULDIV_0_a => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw),
        new Register(22, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_0_div => R20, stepper_tmpPRU_MULDIV_0_qn => R22"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw),
        new Register(18, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_0_mod => R21, stepper_tmpPRU_MULDIV_0_rn => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf45,
        new Register(21, RegisterField.dw), new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_0_mod => R21, stepper_tmpPRU_MULDIV_0_z => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_0_div => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_0_mod => R21, stepper_tmpPRU_MULDIV_0_z => R19"));

    ce.visitLabel(endIf45);


    ce.visitLabel(endIf44);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_0_a => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(22, RegisterField.dw), new Register(22, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_0_qn => R22"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_0_rn => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf46,
        new Register(18, RegisterField.dw), new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_0_rn => R18, stepper_tmpPRU_MULDIV_0_z => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(22, RegisterField.dw), new Register(22, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_0_qn => R22"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_0_rn => R18, stepper_tmpPRU_MULDIV_0_z => R19"));

    ce.visitLabel(endIf46);


    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody42,
            new Register(17, RegisterField.dw), 0).setComment("stepper_tmpPRU_MULDIV_0_a => R17"));
    ce.visitLabel(endWhile43);

    //
    // End PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(3, RegisterField.dw), new Register(20, RegisterField.dw), 0).setComment(
        "stepper_accel_count => R3, stepper_tmpPRU_MULDIV_0_div => R20"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf30,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if31);
    // Call PRU_MUL_DW_W
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(11, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MUL_DW_W_0_x => R17, stepper_step_delay => R11"));
    ce.visitInstruction(
        new LdiInstruction(new Register(14, RegisterField.w2), (short) 2918).setComment(
            "stepper_tmpPRU_MUL_DW_W_0_y => R14.w2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.MIN,
        new Register(18, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(14, RegisterField.w2)).setComment(
        "stepper_tmpPRU_MUL_DW_W_0_a => R18, stepper_tmpPRU_MUL_DW_W_0_x => R17, stepper_tmpPRU_MUL_DW_W_0_y => R14.w2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.MAX,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(14, RegisterField.w2)).setComment(
        "stepper_tmpPRU_MUL_DW_W_0_b => R17, stepper_tmpPRU_MUL_DW_W_0_x => R17, stepper_tmpPRU_MUL_DW_W_0_y => R14.w2"));

    ce.visitInstruction(
        new LdiInstruction(new Register(19, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_MUL_DW_W_0_mul => R19"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile48,
        new Register(18, RegisterField.dw), 0).setComment("stepper_tmpPRU_MUL_DW_W_0_a => R18"));
    ce.visitLabel(startWhileBody47);
    // LMBD?
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.BC, endIf49,
        new Register(18, RegisterField.dw), 0).setComment("stepper_tmpPRU_MUL_DW_W_0_a => R18"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw),
        new Register(17, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MUL_DW_W_0_mul => R19, stepper_tmpPRU_MUL_DW_W_0_b => R17"));
    ce.visitLabel(endIf49);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MUL_DW_W_0_a => R18"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MUL_DW_W_0_b => R17"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody47,
            new Register(18, RegisterField.dw), 0).setComment(
            "stepper_tmpPRU_MUL_DW_W_0_a => R18"));
    ce.visitLabel(endWhile48);

    // End PRU_MUL_DW_W
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(11, RegisterField.dw), new Register(19, RegisterField.dw), 0).setComment(
        "stepper_step_delay => R11, stepper_tmpPRU_MUL_DW_W_0_mul => R19"));

    ce.visitLabel(endIf30);

    //
    // speed <- freq/min_delay
    // n <- v^2/2a == muldiv(v,v,2a)
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endIf50,
        new Register(5, RegisterField.dw), 0).setComment("stepper_decel_ramp => R5"));
    // Call PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(17, RegisterField.dw), new Register(7, RegisterField.dw),
        new Register(9, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_1_x => R17, stepper_max_speed => R7, stepper_min_speed => R9"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(7, RegisterField.dw),
        new Register(9, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_1_y => R18, stepper_max_speed => R7, stepper_min_speed => R9"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(19, RegisterField.dw), new Register(5, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_1_z => R19, stepper_decel_ramp => R5"));
    // http://stackoverflow.com/a/4144956/1261287
    ce.visitInstruction(
        new LdiInstruction(new Register(20, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_MULDIV_1_div => R20"));
    ce.visitInstruction(
        new LdiInstruction(new Register(21, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_MULDIV_1_mod => R21"));
    // Call PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(22, RegisterField.dw), new Register(19, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_y => R22, stepper_tmpPRU_MULDIV_1_z => R19"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b2),
        new Register(18, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_bitX => R14.b2, stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_x => R18"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b3),
        new Register(22, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_bitY => R14.b3, stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_y => R22"));

    ce.visitInstruction(
        new LdiInstruction(new Register(23, RegisterField.dw), (short) 1).setComment(
            "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_mask => R23"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if52,
        new Register(14, RegisterField.b3), new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_bitY => R14.b3, stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_bitX => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(24, RegisterField.dw), new Register(22, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_b => R24, stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_y => R22"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf51,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if52);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(14, RegisterField.b2), new Register(14, RegisterField.b2),
        new Register(14, RegisterField.b3)).setComment(
        "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_diff => R14.b2, stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_bitX => R14.b2, stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_bitY => R14.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(24, RegisterField.dw), new Register(22, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_b => R24, stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_y => R22, stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_diff => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(23, RegisterField.dw), new Register(23, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_mask => R23, stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_diff => R14.b2"));

    ce.visitLabel(endIf51);

    ce.visitInstruction(
        new LdiInstruction(new Register(22, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_div => R22"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile54,
        new Register(23, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_mask => R23"));
    ce.visitLabel(startWhileBody53);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf55,
        new Register(18, RegisterField.dw), new Register(24, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_a => R18, stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_b => R24"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(22, RegisterField.dw), new Register(22, RegisterField.dw),
        new Register(23, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_div => R22, stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_mask => R23"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(24, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_a => R18, stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_b => R24"));

    ce.visitLabel(endIf55);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(23, RegisterField.dw), new Register(23, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_mask => R23"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(24, RegisterField.dw), new Register(24, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_b => R24"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody53,
            new Register(23, RegisterField.dw), 0).setComment(
            "stepper_tmpPRU_MULDIV_1_tmpPRU_DIV_5_mask => R23"));
    ce.visitLabel(endWhile54);

    // End PRU_DIV
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile57,
        new Register(17, RegisterField.dw), 0).setComment("stepper_tmpPRU_MULDIV_1_a => R17"));
    ce.visitLabel(startWhileBody56);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.BC, endIf58,
        new Register(17, RegisterField.dw), 0).setComment("stepper_tmpPRU_MULDIV_1_a => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw),
        new Register(22, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_1_div => R20, stepper_tmpPRU_MULDIV_1_qn => R22"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw),
        new Register(18, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_1_mod => R21, stepper_tmpPRU_MULDIV_1_rn => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf59,
        new Register(21, RegisterField.dw), new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_1_mod => R21, stepper_tmpPRU_MULDIV_1_z => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_1_div => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_1_mod => R21, stepper_tmpPRU_MULDIV_1_z => R19"));

    ce.visitLabel(endIf59);


    ce.visitLabel(endIf58);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_1_a => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(22, RegisterField.dw), new Register(22, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_1_qn => R22"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_1_rn => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf60,
        new Register(18, RegisterField.dw), new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_1_rn => R18, stepper_tmpPRU_MULDIV_1_z => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(22, RegisterField.dw), new Register(22, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_1_qn => R22"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_1_rn => R18, stepper_tmpPRU_MULDIV_1_z => R19"));

    ce.visitLabel(endIf60);


    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody56,
            new Register(17, RegisterField.dw), 0).setComment("stepper_tmpPRU_MULDIV_1_a => R17"));
    ce.visitLabel(endWhile57);

    //
    // End PRU_MULDIV
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if62,
        new Register(4, RegisterField.dw), new Register(5, RegisterField.dw)).setComment(
        "stepper_accel_ramp => R4, stepper_decel_ramp => R5"));
    // Call PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(16, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_2_x => R17, stepper_quantity => R16"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(4, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_2_y => R18, stepper_accel_ramp => R4"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(19, RegisterField.dw), new Register(4, RegisterField.dw),
        new Register(5, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_2_z => R19, stepper_accel_ramp => R4, stepper_decel_ramp => R5"));
    // http://stackoverflow.com/a/4144956/1261287
    ce.visitInstruction(
        new LdiInstruction(new Register(21, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_MULDIV_2_div => R21"));
    ce.visitInstruction(
        new LdiInstruction(new Register(22, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_MULDIV_2_mod => R22"));
    // Call PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(23, RegisterField.dw), new Register(19, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_y => R23, stepper_tmpPRU_MULDIV_2_z => R19"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b2),
        new Register(18, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_bitX => R14.b2, stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_x => R18"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b3),
        new Register(23, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_bitY => R14.b3, stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_y => R23"));

    ce.visitInstruction(
        new LdiInstruction(new Register(24, RegisterField.dw), (short) 1).setComment(
            "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_mask => R24"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if64,
        new Register(14, RegisterField.b3), new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_bitY => R14.b3, stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_bitX => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(25, RegisterField.dw), new Register(23, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_b => R25, stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_y => R23"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf63,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if64);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(14, RegisterField.b2), new Register(14, RegisterField.b2),
        new Register(14, RegisterField.b3)).setComment(
        "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_diff => R14.b2, stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_bitX => R14.b2, stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_bitY => R14.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(25, RegisterField.dw), new Register(23, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_b => R25, stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_y => R23, stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_diff => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(24, RegisterField.dw), new Register(24, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_mask => R24, stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_diff => R14.b2"));

    ce.visitLabel(endIf63);

    ce.visitInstruction(
        new LdiInstruction(new Register(23, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_div => R23"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile66,
        new Register(24, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_mask => R24"));
    ce.visitLabel(startWhileBody65);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf67,
        new Register(18, RegisterField.dw), new Register(25, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_a => R18, stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_b => R25"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(23, RegisterField.dw), new Register(23, RegisterField.dw),
        new Register(24, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_div => R23, stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_mask => R24"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(25, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_a => R18, stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_b => R25"));

    ce.visitLabel(endIf67);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(24, RegisterField.dw), new Register(24, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_mask => R24"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(25, RegisterField.dw), new Register(25, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_b => R25"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody65,
            new Register(24, RegisterField.dw), 0).setComment(
            "stepper_tmpPRU_MULDIV_2_tmpPRU_DIV_5_mask => R24"));
    ce.visitLabel(endWhile66);

    // End PRU_DIV
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile69,
        new Register(17, RegisterField.dw), 0).setComment("stepper_tmpPRU_MULDIV_2_a => R17"));
    ce.visitLabel(startWhileBody68);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.BC, endIf70,
        new Register(17, RegisterField.dw), 0).setComment("stepper_tmpPRU_MULDIV_2_a => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw),
        new Register(23, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_2_div => R21, stepper_tmpPRU_MULDIV_2_qn => R23"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(22, RegisterField.dw), new Register(22, RegisterField.dw),
        new Register(18, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_2_mod => R22, stepper_tmpPRU_MULDIV_2_rn => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf71,
        new Register(22, RegisterField.dw), new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_2_mod => R22, stepper_tmpPRU_MULDIV_2_z => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_2_div => R21"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(22, RegisterField.dw), new Register(22, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_2_mod => R22, stepper_tmpPRU_MULDIV_2_z => R19"));

    ce.visitLabel(endIf71);


    ce.visitLabel(endIf70);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_2_a => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(23, RegisterField.dw), new Register(23, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_2_qn => R23"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_2_rn => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf72,
        new Register(18, RegisterField.dw), new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_2_rn => R18, stepper_tmpPRU_MULDIV_2_z => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(23, RegisterField.dw), new Register(23, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_2_qn => R23"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_2_rn => R18, stepper_tmpPRU_MULDIV_2_z => R19"));

    ce.visitLabel(endIf72);


    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody68,
            new Register(17, RegisterField.dw), 0).setComment("stepper_tmpPRU_MULDIV_2_a => R17"));
    ce.visitLabel(endWhile69);

    //
    // End PRU_MULDIV

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf61,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if62);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(21, RegisterField.dw), new Register(16, RegisterField.dw), 1).setComment(
        "stepper_decel_lim => R21, stepper_quantity => R16"));

    ce.visitLabel(endIf61);

    //
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GE, if74,
        new Register(21, RegisterField.dw), new Register(20, RegisterField.dw)).setComment(
        "stepper_decel_lim => R21, stepper_max_s_lim => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(12, RegisterField.dw), new Register(16, RegisterField.dw),
        new Register(20, RegisterField.dw)).setComment(
        "stepper_v_decel_start => R12, stepper_quantity => R16, stepper_max_s_lim => R20"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GE, endIf75,
        new Register(12, RegisterField.dw), 2).setComment("stepper_v_decel_start => R12"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(12, RegisterField.dw), new Register(12, RegisterField.dw), 1).setComment(
        "stepper_v_decel_start => R12"));
    ce.visitLabel(endIf75);


    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf73,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if74);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(12, RegisterField.dw), new Register(16, RegisterField.dw),
        new Register(21, RegisterField.dw)).setComment(
        "stepper_v_decel_start => R12, stepper_quantity => R16, stepper_decel_lim => R21"));

    ce.visitLabel(endIf73);


    ce.visitLabel(endIf50);

    //
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GE, if77,
        new Register(11, RegisterField.dw), new Register(8, RegisterField.dw)).setComment(
        "stepper_step_delay => R11, stepper_min_delay => R8"));
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.b3), (short) 1).setComment(
            "stepper_state => R13.b3"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf76,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if77);
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.b3), (short) 2).setComment(
            "stepper_state => R13.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(11, RegisterField.dw), new Register(8, RegisterField.dw), 0).setComment(
        "stepper_step_delay => R11, stepper_min_delay => R8"));

    ce.visitLabel(endIf76);

    //

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf13,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if14);
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.b3), (short) 4).setComment(
            "stepper_state => R13.b3"));
    ce.visitInstruction(
        new LdiInstruction(new Register(10, RegisterField.dw), (short) 0).setComment(
            "stepper_step_count => R10"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf13,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(elsIf78);
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.b3), (short) 2).setComment(
            "stepper_state => R13.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(11, RegisterField.dw), new Register(8, RegisterField.dw), 0).setComment(
        "stepper_step_delay => R11, stepper_min_delay => R8"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf13,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(elsIf79);
    // TODO: добавить вычисление v_decel_start
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.b3), (short) 2).setComment(
            "stepper_state => R13.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(11, RegisterField.dw), new Register(8, RegisterField.dw), 0).setComment(
        "stepper_step_delay => R11, stepper_min_delay => R8"));

    ce.visitLabel(endIf13);


    ce.visitLabel(endIf7);


    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf4,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(elsIf81);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(10, RegisterField.dw), new Register(10, RegisterField.dw), 1).setComment(
        "stepper_step_count => R10"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf4,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(elsIf103);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(10, RegisterField.dw), new Register(10, RegisterField.dw), 1).setComment(
        "stepper_step_count => R10"));
    //
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if83,
        new Register(13, RegisterField.b3), 1).setComment("stepper_state => R13.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(3, RegisterField.dw), new Register(3, RegisterField.dw), 1).setComment(
        "stepper_accel_count => R3"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endIf84,
        new Register(6, RegisterField.dw), 0).setComment("stepper_last_accel_delay => R6"));
    // Если только только перешли к замедлению, то настроим блок accelCalc на вычисление замедления
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(11, RegisterField.dw), new Register(6, RegisterField.dw), 0).setComment(
        "stepper_step_delay => R11, stepper_last_accel_delay => R6"));
    ce.visitInstruction(new LdiInstruction(new Register(6, RegisterField.dw), (short) 0).setComment(
        "stepper_last_accel_delay => R6"));
    ce.visitInstruction(new LdiInstruction(new Register(2, RegisterField.dw), (short) 0).setComment(
        "stepper_accelCalc_rest => R2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(3, RegisterField.dw), new Register(3, RegisterField.dw), 1).setComment(
        "stepper_accel_count => R3"));

    ce.visitLabel(endIf84);


    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf82,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if83);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(3, RegisterField.dw), new Register(3, RegisterField.dw), 1).setComment(
        "stepper_accel_count => R3"));

    ce.visitLabel(endIf82);

    //
    // Call PRU_STEPPER_ACCEL_CALC
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(3, RegisterField.dw), 0).setComment(
        "stepper_accelCalc_accel_count => R17, stepper_accel_count => R3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(11, RegisterField.dw), 0).setComment(
        "stepper_accelCalc_step_delay => R18, stepper_step_delay => R11"));
    ce.visitInstruction(
        new LdiInstruction(new Register(14, RegisterField.b2), (short) 0).setComment(
            "stepper_accelCalc_accel => R14.b2"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, ne85,
        new Register(13, RegisterField.b3), 1).setComment("stepper_state => R13.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.XOR,
        new Register(14, RegisterField.b2), new Register(14, RegisterField.b2), 1).setComment(
        "stepper_accelCalc_accel => R14.b2"));
    ce.visitLabel(ne85);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(19, RegisterField.dw), new Register(18, RegisterField.dw), 1).setComment(
        "stepper_accelCalc_step_delay2x => R19, stepper_accelCalc_step_delay => R18"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw),
        new Register(2, RegisterField.dw)).setComment(
        "stepper_accelCalc_step_delay2x => R19, stepper_accelCalc_rest => R2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw), 2).setComment(
        "stepper_accelCalc_accel_count4x => R17, stepper_accelCalc_accel_count => R17"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if87,
        new Register(14, RegisterField.b2), 0).setComment("stepper_accelCalc_accel => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw), 1).setComment(
        "stepper_accelCalc_accel_count4x => R17"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf86,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if87);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw), 1).setComment(
        "stepper_accelCalc_accel_count4x => R17"));

    ce.visitLabel(endIf86);

    // Call PRU_DIV
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b3),
        new Register(19, RegisterField.dw), (byte) 1).setComment(
        "stepper_accelCalc_tmpPRU_DIV_4_bitX => R14.b3, stepper_accelCalc_tmpPRU_DIV_4_x => R19"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(20, RegisterField.b0),
        new Register(17, RegisterField.dw), (byte) 1).setComment(
        "stepper_accelCalc_tmpPRU_DIV_4_bitY => R20.b0, stepper_accelCalc_tmpPRU_DIV_4_y => R17"));

    ce.visitInstruction(
        new LdiInstruction(new Register(21, RegisterField.dw), (short) 1).setComment(
            "stepper_accelCalc_tmpPRU_DIV_4_mask => R21"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if89,
        new Register(20, RegisterField.b0), new Register(14, RegisterField.b3)).setComment(
        "stepper_accelCalc_tmpPRU_DIV_4_bitY => R20.b0, stepper_accelCalc_tmpPRU_DIV_4_bitX => R14.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(22, RegisterField.dw), new Register(17, RegisterField.dw), 0).setComment(
        "stepper_accelCalc_tmpPRU_DIV_4_b => R22, stepper_accelCalc_tmpPRU_DIV_4_y => R17"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf88,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if89);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(14, RegisterField.b3), new Register(14, RegisterField.b3),
        new Register(20, RegisterField.b0)).setComment(
        "stepper_accelCalc_tmpPRU_DIV_4_diff => R14.b3, stepper_accelCalc_tmpPRU_DIV_4_bitX => R14.b3, stepper_accelCalc_tmpPRU_DIV_4_bitY => R20.b0"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(22, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(14, RegisterField.b3)).setComment(
        "stepper_accelCalc_tmpPRU_DIV_4_b => R22, stepper_accelCalc_tmpPRU_DIV_4_y => R17, stepper_accelCalc_tmpPRU_DIV_4_diff => R14.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw),
        new Register(14, RegisterField.b3)).setComment(
        "stepper_accelCalc_tmpPRU_DIV_4_mask => R21, stepper_accelCalc_tmpPRU_DIV_4_diff => R14.b3"));

    ce.visitLabel(endIf88);

    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.dw), (short) 0).setComment(
            "stepper_accelCalc_tmpPRU_DIV_4_div => R17"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile91,
        new Register(21, RegisterField.dw), 0).setComment(
        "stepper_accelCalc_tmpPRU_DIV_4_mask => R21"));
    ce.visitLabel(startWhileBody90);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf92,
        new Register(19, RegisterField.dw), new Register(22, RegisterField.dw)).setComment(
        "stepper_accelCalc_tmpPRU_DIV_4_a => R19, stepper_accelCalc_tmpPRU_DIV_4_b => R22"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(21, RegisterField.dw)).setComment(
        "stepper_accelCalc_tmpPRU_DIV_4_div => R17, stepper_accelCalc_tmpPRU_DIV_4_mask => R21"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw),
        new Register(22, RegisterField.dw)).setComment(
        "stepper_accelCalc_tmpPRU_DIV_4_a => R19, stepper_accelCalc_tmpPRU_DIV_4_b => R22"));

    ce.visitLabel(endIf92);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw), 1).setComment(
        "stepper_accelCalc_tmpPRU_DIV_4_mask => R21"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(22, RegisterField.dw), new Register(22, RegisterField.dw), 1).setComment(
        "stepper_accelCalc_tmpPRU_DIV_4_b => R22"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody90,
            new Register(21, RegisterField.dw), 0).setComment(
            "stepper_accelCalc_tmpPRU_DIV_4_mask => R21"));
    ce.visitLabel(endWhile91);

    // End PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(2, RegisterField.dw), new Register(19, RegisterField.dw), 0).setComment(
        "stepper_accelCalc_rest => R2, stepper_accelCalc_tmpPRU_DIV_4_mod => R19"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if94,
        new Register(14, RegisterField.b2), 0).setComment("stepper_accelCalc_accel => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(17, RegisterField.dw)).setComment(
        "stepper_accelCalc_next_delay => R17, stepper_accelCalc_step_delay => R18"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf93,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if94);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(17, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(17, RegisterField.dw)).setComment(
        "stepper_accelCalc_next_delay => R17, stepper_accelCalc_step_delay => R18"));

    ce.visitLabel(endIf93);

    // End PRU_STEPPER_ACCEL_CALC
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if96,
        new Register(13, RegisterField.b3), 3).setComment("stepper_state => R13.b3"));
    // Если ускорение
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(6, RegisterField.dw), new Register(17, RegisterField.dw), 0).setComment(
        "stepper_last_accel_delay => R6, stepper_new_step_delay => R17"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.LT, endIf97,
        new Register(17, RegisterField.dw), new Register(8, RegisterField.dw)).setComment(
        "stepper_new_step_delay => R17, stepper_min_delay => R8"));
    // Если достигли максимальную скорость, то начинаем равномерное движение
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(8, RegisterField.dw), 0).setComment(
        "stepper_new_step_delay => R17, stepper_min_delay => R8"));
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.b3), (short) 2).setComment(
            "stepper_state => R13.b3"));

    ce.visitLabel(endIf97);


    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf95,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if96);
    // Если замедление
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, orMatch99,
        new Register(3, RegisterField.dw), 1).setComment("stepper_accel_count => R3"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GE, endIf98,
        new Register(17, RegisterField.dw), new Register(8, RegisterField.dw)).setComment(
        "stepper_new_step_delay => R17, stepper_min_delay => R8"));
    ce.visitLabel(orMatch99);

    // Если замедление закончилось
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if101,
        new Register(14, RegisterField.b0), 0).setComment("stepper_enable => R14.b0"));
    // Останавливаемся
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.b3), (short) 4).setComment(
            "stepper_state => R13.b3"));
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.dw), (short) 0).setComment(
            "stepper_new_step_delay => R17"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf100,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if101);
    // Продолжаем на минимальной скорости
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.b3), (short) 2).setComment(
            "stepper_state => R13.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(8, RegisterField.dw), 0).setComment(
        "stepper_new_step_delay => R17, stepper_min_delay => R8"));

    ce.visitLabel(endIf100);


    ce.visitLabel(endIf98);

    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, endIf102,
        new Register(5, RegisterField.dw), 0).setComment("stepper_decel_ramp => R5"));
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.b3), (short) 4).setComment(
            "stepper_state => R13.b3"));
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.dw), (short) 0).setComment(
            "stepper_new_step_delay => R17"));

    ce.visitLabel(endIf102);


    ce.visitLabel(endIf95);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(11, RegisterField.dw), new Register(17, RegisterField.dw), 0).setComment(
        "stepper_step_delay => R11, stepper_new_step_delay => R17"));

    ce.visitLabel(endIf4);

    //
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, endIf104,
        new Register(14, RegisterField.b0), 0).setComment("stepper_enable => R14.b0"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if106,
        new Register(13, RegisterField.b3), 1).setComment("stepper_state => R13.b3"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, elsIf111,
        new Register(13, RegisterField.b3), 2).setComment("stepper_state => R13.b3"));
    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf105,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if106);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if108,
        new Register(5, RegisterField.dw), 0).setComment("stepper_decel_ramp => R5"));
    // Нужно замедляться -- планируем замедление
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(12, RegisterField.dw), new Register(10, RegisterField.dw), 1).setComment(
        "stepper_v_decel_start => R12, stepper_step_count => R10"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf107,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if108);
    // Можно тормозить резко -- тормозим
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.b3), (short) 4).setComment(
            "stepper_state => R13.b3"));
    ce.visitInstruction(
        new LdiInstruction(new Register(11, RegisterField.dw), (short) 0).setComment(
            "stepper_step_delay => R11"));

    ce.visitLabel(endIf107);

    //

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf105,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(elsIf111);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if110,
        new Register(4, RegisterField.dw), 0).setComment("stepper_accel_ramp => R4"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, if110,
        new Register(5, RegisterField.dw), 0).setComment("stepper_decel_ramp => R5"));

    // Если замедление на участке "макс скорости", то включаем тормоз по запланированому в начале графику
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(12, RegisterField.dw), new Register(10, RegisterField.dw), 1).setComment(
        "stepper_v_decel_start => R12, stepper_step_count => R10"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf109,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if110);
    // Если тормозим без замедления, то просто останавливаемся
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.b3), (short) 4).setComment(
            "stepper_state => R13.b3"));
    ce.visitInstruction(
        new LdiInstruction(new Register(11, RegisterField.dw), (short) 0).setComment(
            "stepper_step_delay => R11"));

    ce.visitLabel(endIf109);

    //

    ce.visitLabel(endIf105);

    ce.visitLabel(endIf104);

    //
    // Если идёт генерация, то проверим не пора ли останавливаться
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.LT, if113,
        new Register(10, RegisterField.dw), new Register(16, RegisterField.dw)).setComment(
        "stepper_step_count => R10, stepper_quantity => R16"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GE, orMatch133,
        new Register(10, RegisterField.dw), new Register(12, RegisterField.dw)).setComment(
        "stepper_step_count => R10, stepper_v_decel_start => R12"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, orMatch133,
        new Register(6, RegisterField.dw), 0).setComment("stepper_last_accel_delay => R6"));

    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, elsIf132,
        new Register(13, RegisterField.b3), 4).setComment("stepper_state => R13.b3"));
    ce.visitLabel(orMatch133);

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf112,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if113);
    // Если все импульсы сделаны, то останавливаемся
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.b3), (short) 4).setComment(
            "stepper_state => R13.b3"));
    ce.visitInstruction(
        new LdiInstruction(new Register(11, RegisterField.dw), (short) 0).setComment(
            "stepper_step_delay => R11"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(10, RegisterField.dw), new Register(16, RegisterField.dw), 0).setComment(
        "stepper_step_count => R10, stepper_quantity => R16"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf112,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(elsIf132);
    // Если пора замедляться, то начинаем замедление
    ce.visitInstruction(
        new LdiInstruction(new Register(13, RegisterField.b3), (short) 3).setComment(
            "stepper_state => R13.b3"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if115,
        new Register(9, RegisterField.dw), 0).setComment("stepper_min_speed => R9"));
    // Минимум -- 10 Гц
    ce.visitInstruction(
        new LdiInstruction(new Register(8, RegisterField.w0), (short) 11520).setComment(
            "stepper_min_delay => R8"));
    ce.visitInstruction(
        new LdiInstruction(new Register(8, RegisterField.w2), (short) 305).setComment(""));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf114,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if115);
    // Если есть мин скорость, то вычисляем макс интервал
    // Call PRU_DIV
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.w0), (short) 49664).setComment(
            "stepper_tmpPRU_DIV_3_x => R17"));
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.w2), (short) 3051).setComment(""));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(9, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_DIV_3_y => R18, stepper_min_speed => R9"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b2),
        new Register(17, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_DIV_3_bitX => R14.b2, stepper_tmpPRU_DIV_3_x => R17"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b3),
        new Register(18, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_DIV_3_bitY => R14.b3, stepper_tmpPRU_DIV_3_y => R18"));

    ce.visitInstruction(
        new LdiInstruction(new Register(19, RegisterField.dw), (short) 1).setComment(
            "stepper_tmpPRU_DIV_3_mask => R19"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if117,
        new Register(14, RegisterField.b3), new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_DIV_3_bitY => R14.b3, stepper_tmpPRU_DIV_3_bitX => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(18, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_DIV_3_b => R20, stepper_tmpPRU_DIV_3_y => R18"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf116,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if117);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(14, RegisterField.b2), new Register(14, RegisterField.b2),
        new Register(14, RegisterField.b3)).setComment(
        "stepper_tmpPRU_DIV_3_diff => R14.b2, stepper_tmpPRU_DIV_3_bitX => R14.b2, stepper_tmpPRU_DIV_3_bitY => R14.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(20, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_DIV_3_b => R20, stepper_tmpPRU_DIV_3_y => R18, stepper_tmpPRU_DIV_3_diff => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_DIV_3_mask => R19, stepper_tmpPRU_DIV_3_diff => R14.b2"));

    ce.visitLabel(endIf116);

    ce.visitInstruction(
        new LdiInstruction(new Register(18, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_DIV_3_div => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile119,
        new Register(19, RegisterField.dw), 0).setComment("stepper_tmpPRU_DIV_3_mask => R19"));
    ce.visitLabel(startWhileBody118);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf120,
        new Register(17, RegisterField.dw), new Register(20, RegisterField.dw)).setComment(
        "stepper_tmpPRU_DIV_3_a => R17, stepper_tmpPRU_DIV_3_b => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_DIV_3_div => R18, stepper_tmpPRU_DIV_3_mask => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(20, RegisterField.dw)).setComment(
        "stepper_tmpPRU_DIV_3_a => R17, stepper_tmpPRU_DIV_3_b => R20"));

    ce.visitLabel(endIf120);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_DIV_3_mask => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_DIV_3_b => R20"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody118,
            new Register(19, RegisterField.dw), 0).setComment("stepper_tmpPRU_DIV_3_mask => R19"));
    ce.visitLabel(endWhile119);

    // Variable stepper_tmpPRU_DIV_3_mod was never used, thus optimized out instruction ADD
    // End PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(8, RegisterField.dw), new Register(18, RegisterField.dw), 0).setComment(
        "stepper_min_delay => R8, stepper_tmpPRU_DIV_3_div => R18"));

    ce.visitLabel(endIf114);

    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endIf121,
        new Register(4, RegisterField.dw), new Register(5, RegisterField.dw)).setComment(
        "stepper_accel_ramp => R4, stepper_decel_ramp => R5"));
    // Call PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(3, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_3_x => R17, stepper_accel_count => R3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(4, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_3_y => R18, stepper_accel_ramp => R4"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(19, RegisterField.dw), new Register(5, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_3_z => R19, stepper_decel_ramp => R5"));
    // http://stackoverflow.com/a/4144956/1261287
    ce.visitInstruction(
        new LdiInstruction(new Register(20, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_MULDIV_3_div => R20"));
    ce.visitInstruction(
        new LdiInstruction(new Register(21, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_MULDIV_3_mod => R21"));
    // Call PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(22, RegisterField.dw), new Register(19, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_y => R22, stepper_tmpPRU_MULDIV_3_z => R19"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b2),
        new Register(18, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_bitX => R14.b2, stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_x => R18"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b3),
        new Register(22, RegisterField.dw), (byte) 1).setComment(
        "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_bitY => R14.b3, stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_y => R22"));

    ce.visitInstruction(
        new LdiInstruction(new Register(23, RegisterField.dw), (short) 1).setComment(
            "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_mask => R23"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if123,
        new Register(14, RegisterField.b3), new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_bitY => R14.b3, stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_bitX => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(24, RegisterField.dw), new Register(22, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_b => R24, stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_y => R22"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf122,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if123);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(14, RegisterField.b2), new Register(14, RegisterField.b2),
        new Register(14, RegisterField.b3)).setComment(
        "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_diff => R14.b2, stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_bitX => R14.b2, stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_bitY => R14.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(24, RegisterField.dw), new Register(22, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_b => R24, stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_y => R22, stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_diff => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(23, RegisterField.dw), new Register(23, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_mask => R23, stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_diff => R14.b2"));

    ce.visitLabel(endIf122);

    ce.visitInstruction(
        new LdiInstruction(new Register(22, RegisterField.dw), (short) 0).setComment(
            "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_div => R22"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile125,
        new Register(23, RegisterField.dw), 0).setComment(
        "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_mask => R23"));
    ce.visitLabel(startWhileBody124);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf126,
        new Register(18, RegisterField.dw), new Register(24, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_a => R18, stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_b => R24"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(22, RegisterField.dw), new Register(22, RegisterField.dw),
        new Register(23, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_div => R22, stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_mask => R23"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(24, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_a => R18, stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_b => R24"));

    ce.visitLabel(endIf126);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(23, RegisterField.dw), new Register(23, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_mask => R23"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(24, RegisterField.dw), new Register(24, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_b => R24"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody124,
            new Register(23, RegisterField.dw), 0).setComment(
            "stepper_tmpPRU_MULDIV_3_tmpPRU_DIV_5_mask => R23"));
    ce.visitLabel(endWhile125);

    // End PRU_DIV
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile128,
        new Register(17, RegisterField.dw), 0).setComment("stepper_tmpPRU_MULDIV_3_a => R17"));
    ce.visitLabel(startWhileBody127);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.BC, endIf129,
        new Register(17, RegisterField.dw), 0).setComment("stepper_tmpPRU_MULDIV_3_a => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw),
        new Register(22, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_3_div => R20, stepper_tmpPRU_MULDIV_3_qn => R22"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw),
        new Register(18, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_3_mod => R21, stepper_tmpPRU_MULDIV_3_rn => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf130,
        new Register(21, RegisterField.dw), new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_3_mod => R21, stepper_tmpPRU_MULDIV_3_z => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_3_div => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_3_mod => R21, stepper_tmpPRU_MULDIV_3_z => R19"));

    ce.visitLabel(endIf130);


    ce.visitLabel(endIf129);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_3_a => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(22, RegisterField.dw), new Register(22, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_3_qn => R22"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_3_rn => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf131,
        new Register(18, RegisterField.dw), new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_3_rn => R18, stepper_tmpPRU_MULDIV_3_z => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(22, RegisterField.dw), new Register(22, RegisterField.dw), 1).setComment(
        "stepper_tmpPRU_MULDIV_3_qn => R22"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "stepper_tmpPRU_MULDIV_3_rn => R18, stepper_tmpPRU_MULDIV_3_z => R19"));

    ce.visitLabel(endIf131);


    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody127,
            new Register(17, RegisterField.dw), 0).setComment("stepper_tmpPRU_MULDIV_3_a => R17"));
    ce.visitLabel(endWhile128);

    //
    // End PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(3, RegisterField.dw), new Register(20, RegisterField.dw), 0).setComment(
        "stepper_accel_count => R3, stepper_tmpPRU_MULDIV_3_div => R20"));

    ce.visitLabel(endIf121);


    ce.visitLabel(endIf112);

    //
    // End PRU_STEPPER
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if135,
        new Register(11, RegisterField.dw), 0).setComment("stepper_step_delay => R11"));
    ce.visitInstruction(
        new LdiInstruction(new Register(15, RegisterField.dw), (short) 150).setComment(
            "cycleLength => R15"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf134,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if135);
    ce.visitInstruction(
        new LdiInstruction(new Register(14, RegisterField.b1), (short) 1).setComment(
            "out => R14.b1"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endIf136,
        new Register(1, RegisterField.dw), new Register(11, RegisterField.dw)).setComment(
        "prevDelay => R1, stepper_step_delay => R11"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(1, RegisterField.dw), new Register(11, RegisterField.dw), 0).setComment(
        "prevDelay => R1, stepper_step_delay => R11"));
    // Call PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(11, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_4_x => R17, stepper_step_delay => R11"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(13, RegisterField.w0), 0).setComment(
        "tmpPRU_MULDIV_4_y => R18, pwmMultiplier => R13.w0"));
    ce.visitInstruction(
        new LdiInstruction(new Register(19, RegisterField.w0), (short) 0).setComment(
            "tmpPRU_MULDIV_4_z => R19"));
    ce.visitInstruction(
        new LdiInstruction(new Register(19, RegisterField.w2), (short) 1).setComment(""));
    // http://stackoverflow.com/a/4144956/1261287
    ce.visitInstruction(
        new LdiInstruction(new Register(20, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MULDIV_4_div => R20"));
    ce.visitInstruction(
        new LdiInstruction(new Register(21, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MULDIV_4_mod => R21"));
    // Call PRU_DIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(22, RegisterField.dw), new Register(19, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_4_tmpPRU_DIV_5_y => R22, tmpPRU_MULDIV_4_z => R19"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b2),
        new Register(18, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_MULDIV_4_tmpPRU_DIV_5_bitX => R14.b2, tmpPRU_MULDIV_4_tmpPRU_DIV_5_x => R18"));
    ce.visitInstruction(new LeftMostBitDetectInstruction(new Register(14, RegisterField.b3),
        new Register(22, RegisterField.dw), (byte) 1).setComment(
        "tmpPRU_MULDIV_4_tmpPRU_DIV_5_bitY => R14.b3, tmpPRU_MULDIV_4_tmpPRU_DIV_5_y => R22"));

    ce.visitInstruction(
        new LdiInstruction(new Register(23, RegisterField.dw), (short) 1).setComment(
            "tmpPRU_MULDIV_4_tmpPRU_DIV_5_mask => R23"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, if138,
        new Register(14, RegisterField.b3), new Register(14, RegisterField.b2)).setComment(
        "tmpPRU_MULDIV_4_tmpPRU_DIV_5_bitY => R14.b3, tmpPRU_MULDIV_4_tmpPRU_DIV_5_bitX => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(24, RegisterField.dw), new Register(22, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_4_tmpPRU_DIV_5_b => R24, tmpPRU_MULDIV_4_tmpPRU_DIV_5_y => R22"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf137,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if138);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(14, RegisterField.b2), new Register(14, RegisterField.b2),
        new Register(14, RegisterField.b3)).setComment(
        "tmpPRU_MULDIV_4_tmpPRU_DIV_5_diff => R14.b2, tmpPRU_MULDIV_4_tmpPRU_DIV_5_bitX => R14.b2, tmpPRU_MULDIV_4_tmpPRU_DIV_5_bitY => R14.b3"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(24, RegisterField.dw), new Register(22, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "tmpPRU_MULDIV_4_tmpPRU_DIV_5_b => R24, tmpPRU_MULDIV_4_tmpPRU_DIV_5_y => R22, tmpPRU_MULDIV_4_tmpPRU_DIV_5_diff => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(23, RegisterField.dw), new Register(23, RegisterField.dw),
        new Register(14, RegisterField.b2)).setComment(
        "tmpPRU_MULDIV_4_tmpPRU_DIV_5_mask => R23, tmpPRU_MULDIV_4_tmpPRU_DIV_5_diff => R14.b2"));

    ce.visitLabel(endIf137);

    ce.visitInstruction(
        new LdiInstruction(new Register(22, RegisterField.dw), (short) 0).setComment(
            "tmpPRU_MULDIV_4_tmpPRU_DIV_5_div => R22"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile140,
        new Register(23, RegisterField.dw), 0).setComment(
        "tmpPRU_MULDIV_4_tmpPRU_DIV_5_mask => R23"));
    ce.visitLabel(startWhileBody139);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf141,
        new Register(18, RegisterField.dw), new Register(24, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_4_tmpPRU_DIV_5_a => R18, tmpPRU_MULDIV_4_tmpPRU_DIV_5_b => R24"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(22, RegisterField.dw), new Register(22, RegisterField.dw),
        new Register(23, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_4_tmpPRU_DIV_5_div => R22, tmpPRU_MULDIV_4_tmpPRU_DIV_5_mask => R23"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(24, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_4_tmpPRU_DIV_5_a => R18, tmpPRU_MULDIV_4_tmpPRU_DIV_5_b => R24"));

    ce.visitLabel(endIf141);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(23, RegisterField.dw), new Register(23, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_4_tmpPRU_DIV_5_mask => R23"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(24, RegisterField.dw), new Register(24, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_4_tmpPRU_DIV_5_b => R24"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody139,
            new Register(23, RegisterField.dw), 0).setComment(
            "tmpPRU_MULDIV_4_tmpPRU_DIV_5_mask => R23"));
    ce.visitLabel(endWhile140);

    // End PRU_DIV
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile143,
        new Register(17, RegisterField.dw), 0).setComment("tmpPRU_MULDIV_4_a => R17"));
    ce.visitLabel(startWhileBody142);
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.BC, endIf144,
        new Register(17, RegisterField.dw), 0).setComment("tmpPRU_MULDIV_4_a => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw),
        new Register(22, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_4_div => R20, tmpPRU_MULDIV_4_qn => R22"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw),
        new Register(18, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_4_mod => R21, tmpPRU_MULDIV_4_rn => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf145,
        new Register(21, RegisterField.dw), new Register(19, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_4_mod => R21, tmpPRU_MULDIV_4_z => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_4_div => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(21, RegisterField.dw), new Register(21, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_4_mod => R21, tmpPRU_MULDIV_4_z => R19"));

    ce.visitLabel(endIf145);


    ce.visitLabel(endIf144);

    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSR,
        new Register(17, RegisterField.dw), new Register(17, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_4_a => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(22, RegisterField.dw), new Register(22, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_4_qn => R22"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.LSL,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_4_rn => R18"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, endIf146,
        new Register(18, RegisterField.dw), new Register(19, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_4_rn => R18, tmpPRU_MULDIV_4_z => R19"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(22, RegisterField.dw), new Register(22, RegisterField.dw), 1).setComment(
        "tmpPRU_MULDIV_4_qn => R22"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "tmpPRU_MULDIV_4_rn => R18, tmpPRU_MULDIV_4_z => R19"));

    ce.visitLabel(endIf146);


    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody142,
            new Register(17, RegisterField.dw), 0).setComment("tmpPRU_MULDIV_4_a => R17"));
    ce.visitLabel(endWhile143);

    //
    // End PRU_MULDIV
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(15, RegisterField.dw), new Register(20, RegisterField.dw), 0).setComment(
        "cycleLength => R15, tmpPRU_MULDIV_4_div => R20"));

    ce.visitLabel(endIf136);


    ce.visitLabel(endIf134);


    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf2,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if3);
    ce.visitInstruction(
        new LdiInstruction(new Register(14, RegisterField.b1), (short) 0).setComment(
            "out => R14.b1"));

    ce.visitLabel(endIf2);

    //
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.STORE,
        new Register(11, RegisterField.dw)).setAddress(3).setOffset(60).setLength(
        4).encode().setComment("stepper_step_delay => R11"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.STORE,
        new Register(13, RegisterField.b3)).setAddress(3).setOffset(64).setLength(
        1).encode().setComment("stepper_state => R13.b3"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.STORE,
        new Register(10, RegisterField.dw)).setAddress(3).setOffset(68).setLength(
        4).encode().setComment("stepper_step_count => R10"));

    //
    ce.visitInstruction(
        new LdiInstruction(new Register(17, RegisterField.dw), (short) 28684).setComment(
            "controlRegisterAddress => R17"));
    //
    ce.visitLabel(startRepeat147);
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(14, RegisterField.b2)).setAddress(3).setOffset(0).setLength(
        1).encode().setComment("dataReady => R14.b2"));
    //
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endIf148,
        new Register(14, RegisterField.b2), 0).setComment("dataReady => R14.b2"));
    //
    // Загружаем параметры
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(16, RegisterField.dw)).setAddress(3).setOffset(16).setLength(
        4).encode().setComment("stepper_quantity => R16"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(7, RegisterField.dw)).setAddress(3).setOffset(20).setLength(
        4).encode().setComment("stepper_max_speed => R7"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(9, RegisterField.dw)).setAddress(3).setOffset(36).setLength(
        4).encode().setComment("stepper_min_speed => R9"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(14, RegisterField.b0)).setAddress(3).setOffset(24).setLength(
        1).encode().setComment("stepper_enable => R14.b0"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(4, RegisterField.dw)).setAddress(3).setOffset(28).setLength(
        4).encode().setComment("stepper_accel_ramp => R4"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(5, RegisterField.dw)).setAddress(3).setOffset(32).setLength(
        4).encode().setComment("stepper_decel_ramp => R5"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(13, RegisterField.b2)).setAddress(3).setOffset(40).setLength(
        1).encode().setComment("outBit => R13.b2"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(13, RegisterField.w0)).setAddress(3).setOffset(44).setLength(
        2).encode().setComment("pwmMultiplier => R13.w0"));

    //
    ce.visitInstruction(
        new LdiInstruction(new Register(14, RegisterField.b2), (short) 0).setComment(
            "dataReady => R14.b2"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.STORE,
        new Register(14, RegisterField.b2)).setAddress(3).setOffset(0).setLength(
        1).encode().setComment("dataReady => R14.b2"));

    ce.visitLabel(endIf148);

    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(18, RegisterField.dw)).setAddress(
        new Register(17, RegisterField.dw)).setOffset(0).setLength(4).encode().setComment(
        "currentCycles => R18, controlRegisterAddress => R17"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(18, RegisterField.dw), new Register(18, RegisterField.dw), 60).setComment(
        "currentCycles => R18"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.GT, startRepeat147,
            new Register(18, RegisterField.dw), new Register(15, RegisterField.dw)).setComment(
            "currentCycles => R18, cycleLength => R15"));

    //
    // Call WAIT_TICK_DW
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(17, RegisterField.dw), new Register(15, RegisterField.dw), 0).setComment(
        "tmpWAIT_TICK_DW_0_pruCycleLength => R17, cycleLength => R15"));
    // 0x00007000..0x00007FFF -- PRU0 Control Registers, 0xC -- cycle count register
    ce.visitInstruction(
        new LdiInstruction(new Register(18, RegisterField.dw), (short) 28684).setComment(
            "tmpWAIT_TICK_DW_0_controlRegisterAddress => R18"));
    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.LOAD,
        new Register(19, RegisterField.dw)).setAddress(
        new Register(18, RegisterField.dw)).setOffset(0).setLength(4).encode().setComment(
        "Load cycle count, 1+wdcnt*2==3 cycles, tmpWAIT_TICK_DW_0_currentCycles => R19, tmpWAIT_TICK_DW_0_controlRegisterAddress => R18"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(19, RegisterField.dw), new Register(19, RegisterField.dw), 10).setComment(
        "tmpWAIT_TICK_DW_0_currentCycles => R19"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.LT, if150,
        new Register(17, RegisterField.dw), new Register(19, RegisterField.dw)).setComment(
        "tmpWAIT_TICK_DW_0_pruCycleLength => R17, tmpWAIT_TICK_DW_0_currentCycles => R19"));
    ce.visitInstruction(
        new LdiInstruction(new Register(20, RegisterField.dw), (short) 0).setComment(
            "tmpWAIT_TICK_DW_0_cyclesLeft => R20"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf149,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if150);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(20, RegisterField.dw), new Register(17, RegisterField.dw),
        new Register(19, RegisterField.dw)).setComment(
        "tmpWAIT_TICK_DW_0_cyclesLeft => R20, tmpWAIT_TICK_DW_0_pruCycleLength => R17, tmpWAIT_TICK_DW_0_currentCycles => R19"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.BC, endIf151,
        new Register(20, RegisterField.dw), 0).setComment("tmpWAIT_TICK_DW_0_cyclesLeft => R20"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.XOR,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 1).setComment(
        "tmpWAIT_TICK_DW_0_cyclesLeft => R20"));
    ce.visitLabel(endIf151);

    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endWhile153,
        new Register(20, RegisterField.dw), 0).setComment("tmpWAIT_TICK_DW_0_cyclesLeft => R20"));
    ce.visitLabel(startWhileBody152);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SUB,
        new Register(20, RegisterField.dw), new Register(20, RegisterField.dw), 2).setComment(
        "tmpWAIT_TICK_DW_0_cyclesLeft => R20"));

    ce.visitInstruction(
        new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, startWhileBody152,
            new Register(20, RegisterField.dw), 0).setComment(
            "tmpWAIT_TICK_DW_0_cyclesLeft => R20"));
    ce.visitLabel(endWhile153);


    ce.visitLabel(endIf149);

    ce.visitInstruction(new MemoryTransferInstruction(MemoryTransferInstruction.Operation.STORE,
        new Register(20, RegisterField.dw)).setAddress(
        new Register(18, RegisterField.dw)).setOffset(0).setLength(4).encode().setComment(
        "Load cycle count, 1+wdcnt*2==3 cycles, tmpWAIT_TICK_DW_0_cyclesLeft => R20, tmpWAIT_TICK_DW_0_controlRegisterAddress => R18"));
    //
    // End WAIT_TICK_DW
    //
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.EQ, endIf154,
        new Register(13, RegisterField.b2), 0).setComment("outBit => R13.b2"));
    // Call PRU_OUT_BIT
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.b2), new Register(14, RegisterField.b1), 0).setComment(
        "tmpPRU_OUT_BIT_0_Q => R14.b2, out => R14.b1"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.ADD,
        new Register(14, RegisterField.b3), new Register(13, RegisterField.b2), 0).setComment(
        "tmpPRU_OUT_BIT_0_BIT => R14.b3, outBit => R13.b2"));
    ce.visitInstruction(new QuickBranchInstruction(QuickBranchInstruction.Operation.NE, if156,
        new Register(14, RegisterField.b2), 0).setComment("tmpPRU_OUT_BIT_0_Q => R14.b2"));
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.CLR,
        new Register(30, RegisterField.dw), new Register(30, RegisterField.dw),
        new Register(14, RegisterField.b3)).setComment("tmpPRU_OUT_BIT_0_BIT => R14.b3"));

    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, endIf155,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(if156);
    ce.visitInstruction(new ArithmeticInstruction(ArithmeticInstruction.Operation.SET,
        new Register(30, RegisterField.dw), new Register(30, RegisterField.dw),
        new Register(14, RegisterField.b3)).setComment("tmpPRU_OUT_BIT_0_BIT => R14.b3"));

    ce.visitLabel(endIf155);

    // End PRU_OUT_BIT

    ce.visitLabel(endIf154);


    ce.visitInstruction(new JumpInstruction(Format2Instruction.Operation.JMP, startWhileBody0,
        new Register(1, RegisterField.dw)).setComment(""));
    ce.visitLabel(endWhile1);


  }
}
